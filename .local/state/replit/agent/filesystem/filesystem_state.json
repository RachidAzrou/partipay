{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# PartiPay - Bill Splitting Application\n\n## Overview\n\nPartiPay is a Dutch mobile web application designed for collaborative restaurant bill splitting. The application enables users to scan QR codes at restaurant tables to retrieve bill information and then split costs either equally among participants or by individual items. The system features real-time collaboration through WebSocket connections, allowing multiple users to participate in the same session and see updates instantly.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nBank linking preference: Direct/simple linking without multiple choices or complex flows.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built as a React SPA using Vite as the build tool. The application follows a component-based architecture with:\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management with real-time updates\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **Mobile-First Design**: Responsive design optimized for mobile devices with PWA capabilities\n\nThe frontend implements a multi-step wizard flow for bill splitting:\n1. QR code scanning to retrieve bill data\n2. Split mode selection (equal or by items)\n3. User registration and item selection\n4. Real-time collaboration dashboard\n\n### Backend Architecture\nThe server uses Express.js with TypeScript, following a RESTful API pattern with WebSocket support for real-time features:\n- **HTTP Server**: Express.js handling REST endpoints\n- **WebSocket Server**: Real-time bidirectional communication for session updates\n- **Session Management**: In-memory session tracking with WebSocket client mapping\n- **Storage Layer**: Abstracted storage interface for database operations\n\nThe backend implements a broadcasting system where changes in a session are pushed to all connected clients in real-time.\n\n### Database Design\nThe application uses PostgreSQL with Drizzle ORM for type-safe database operations. The schema includes:\n- **Sessions**: Bill splitting sessions with metadata\n- **Participants**: Users in each session with payment status\n- **Bill Items**: Individual items from restaurant bills\n- **Item Claims**: Many-to-many relationship between participants and claimed items\n- **Payments**: Payment tracking and status\n\nThe database design supports both equal splitting and item-based splitting modes through the flexible claims system.\n\n### Real-Time Communication\nWebSocket connections are established per client and organized by session ID. The system broadcasts updates for:\n- New participant joins\n- Item claims/unclaims\n- Payment status changes\n- Session state updates\n\n### Development Architecture\nThe project uses a monorepo structure with shared TypeScript types and schemas:\n- **Shared Directory**: Common types, database schema, and validation schemas\n- **Client Directory**: React frontend application\n- **Server Directory**: Express backend with API routes and WebSocket handling\n- **Type Safety**: End-to-end type safety using shared Zod schemas\n\n## External Dependencies\n\n### Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n\n### Frontend Libraries\n- **React Ecosystem**: Core React with hooks and context\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n- **shadcn/ui**: Component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework\n\n### Backend Libraries\n- **Express.js**: Web framework for Node.js\n- **WebSocket (ws)**: Real-time bidirectional communication\n- **Zod**: Runtime type validation and parsing\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Static type checking across the entire stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database migration and schema management\n\n### Third-Party Services\n- **QR Server API**: External service for QR code generation\n- **Font Awesome**: Icon library for UI elements\n- **Google Fonts**: Web font service (Inter font family)\n\n### Mock Banking Integration\nAs of January 2025, the application includes a complete mock banking service for production deployment without external dependencies:\n\n**Mock Bank Service Features:**\n- Realistic Belgian bank simulation (KBC, Belfius, BNP Paribas Fortis, ING BelgiÃ«, Argenta)\n- Authentic Belgian IBAN format validation and generation\n- Multi-step authentication flow with bank selection and account selection\n- Simulated network delays and random authentication failures for realistic behavior\n- Comprehensive error handling and user feedback\n\n**Implementation:**\n- `server/mock-bank-service.ts`: Core banking simulation service\n- `client/src/components/bank-selector.tsx`: Bank selection UI component\n- API endpoints: `/api/mock-banks`, `/api/mock-banks/:bankId/accounts`, `/api/mock-banks/authenticate`\n- Replaced Tink integration completely for production independence\n\nThe application is designed to be deployed on platforms supporting Node.js with PostgreSQL database connectivity.","size_bytes":5302},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertSessionSchema, insertParticipantSchema, insertItemClaimSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { getIbanFromTink, exchangeCodeForToken } from \"./tink-integration.js\";\nimport { MockBankService } from \"./mock-bank-service.js\";\n\ninterface WebSocketClient extends WebSocket {\n  sessionId?: string;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const sessionClients = new Map<string, Set<WebSocketClient>>();\n\n  wss.on('connection', (ws: WebSocketClient) => {\n    console.log('WebSocket connection established');\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'join-session' && data.sessionId) {\n          ws.sessionId = data.sessionId;\n          \n          if (!sessionClients.has(data.sessionId)) {\n            sessionClients.set(data.sessionId, new Set());\n          }\n          sessionClients.get(data.sessionId)!.add(ws);\n          \n          console.log(`Client joined session ${data.sessionId}`);\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (ws.sessionId) {\n        const clients = sessionClients.get(ws.sessionId);\n        if (clients) {\n          clients.delete(ws);\n          if (clients.size === 0) {\n            sessionClients.delete(ws.sessionId);\n          }\n        }\n      }\n    });\n  });\n\n  // Broadcast to session participants\n  function broadcastToSession(sessionId: string, message: any) {\n    const clients = sessionClients.get(sessionId);\n    if (clients) {\n      clients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify(message));\n        }\n      });\n    }\n  }\n\n  // Get client configuration\n  app.get('/api/config', (req, res) => {\n    // Generate the correct redirect URI based on the current request\n    const protocol = req.headers['x-forwarded-proto'] || (req.secure ? 'https' : 'http');\n    const host = req.headers.host;\n    const redirectUri = `${protocol}://${host}/auth/tink/callback`;\n    \n    res.json({\n      tinkClientId: process.env.TINK_CLIENT_ID?.trim(),\n      tinkRedirectUri: redirectUri\n    });\n  });\n\n  // Get mock bill data from QR scan\n  app.post('/api/scan-qr', async (req, res) => {\n    try {\n      const { tableNumber, restaurantName } = req.body;\n      \n      if (!tableNumber || !restaurantName) {\n        return res.status(400).json({ message: 'Table number and restaurant name required' });\n      }\n\n      const billData = await storage.getMockBillData(tableNumber, restaurantName);\n      \n      if (!billData) {\n        return res.status(404).json({ message: 'Bill not found for this table' });\n      }\n\n      res.json(billData);\n    } catch (error) {\n      console.error('QR scan error:', error);\n      res.status(500).json({ message: 'Failed to retrieve bill data' });\n    }\n  });\n\n  // Create new session\n  app.post('/api/sessions', async (req, res) => {\n    try {\n      console.log('POST /api/sessions - Raw request body:', JSON.stringify(req.body, null, 2));\n      \n      const { userData, billItems, ...sessionFields } = req.body;\n      \n      console.log('Extracted sessionFields:', sessionFields);\n      console.log('userData:', userData);\n      console.log('billItems length:', billItems?.length);\n      \n      // Extract participant count from userData\n      const participantCount = userData?.participantCount || 4;\n      \n      const sessionDataForValidation = {\n        ...sessionFields,\n        participantCount\n      };\n      \n      console.log('Session data before validation:', sessionDataForValidation);\n      \n      const sessionData = insertSessionSchema.parse(sessionDataForValidation);\n      \n      console.log('Session data after validation:', sessionData);\n      \n      const session = await storage.createSession(sessionData);\n      \n      // Create bill items if provided\n      if (billItems && billItems.length > 0) {\n        const itemsWithSession = billItems.map((item: any) => ({\n          ...item,\n          sessionId: session.id\n        }));\n        await storage.createBillItems(itemsWithSession);\n      }\n      \n      // Create main booker participant if userData provided\n      if (userData?.name) {\n        const mainBookerData = {\n          sessionId: session.id,\n          name: userData.name,\n          bankAccount: userData.bankAccount || '',\n          isMainBooker: true,\n          hasPaid: false,\n          paidAmount: '0',\n          expectedAmount: '0'\n        };\n        \n        const mainBooker = await storage.createParticipant(mainBookerData);\n        \n        // Update session with main booker ID\n        await storage.updateSession(session.id, { mainBookerId: mainBooker.id });\n        \n        // Handle main booker's item selection for 'items' mode\n        let expectedAmount = 0;\n        if (session.splitMode === 'items' && userData.selectedItems && billItems?.length > 0) {\n          \n          // Get the created bill items from database first\n          const createdItems = await storage.getBillItemsBySession(session.id);\n          \n          // Create item claims for main booker's selections\n          for (const selection of userData.selectedItems) {\n            const billItem = billItems[selection.index];\n            if (billItem && selection.quantity > 0) {\n              // Find matching item in database\n              const matchingItem = createdItems.find(item => \n                item.name === billItem.name && \n                item.price === billItem.price\n              );\n              \n              if (matchingItem) {\n                // Create item claim with the actual selected quantity\n                await storage.createItemClaim({\n                  participantId: mainBooker.id,\n                  billItemId: matchingItem.id,\n                  quantity: selection.quantity\n                });\n                \n                expectedAmount += parseFloat(matchingItem.price) * selection.quantity;\n              }\n            }\n          }\n          \n          // Update main booker's expected amount based on selected items\n          await storage.updateParticipant(mainBooker.id, {\n            expectedAmount: expectedAmount.toFixed(2)\n          });\n        }\n        \n        // Auto-mark main booker as paid since they pay restaurant directly\n        const totalAmount = parseFloat(session.totalAmount);\n        \n        // For items mode, preserve the expectedAmount that was already set based on selected items\n        // For equal mode, set the expectedAmount to the equal share based on actual participant count\n        const mainBookerExpectedAmount = session.splitMode === 'equal' \n          ? (totalAmount / (participantCount || 1)).toString() \n          : expectedAmount.toFixed(2); // Use the calculated amount from selected items\n        \n        await storage.updateParticipant(mainBooker.id, {\n          hasPaid: true,\n          paidAmount: totalAmount.toString(),\n          expectedAmount: mainBookerExpectedAmount\n        });\n        \n        // Create payment record for main booker\n        await storage.createPayment({\n          sessionId: session.id,\n          participantId: mainBooker.id,\n          amount: totalAmount.toString(),\n          status: 'completed'\n        });\n      }\n      \n      console.log('Session created successfully:', session);\n      res.json(session);\n    } catch (error) {\n      console.error('Create session error:', error);\n      \n      // More detailed error reporting\n      if (error instanceof Error) {\n        console.error('Error message:', error.message);\n        console.error('Error stack:', error.stack);\n      }\n      \n      res.status(400).json({ \n        message: 'Invalid session data',\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Get session details\n  app.get('/api/sessions/:id', async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      \n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n\n      const participants = await storage.getParticipantsBySession(session.id);\n      const billItems = await storage.getBillItemsBySession(session.id);\n      const itemClaims = await storage.getItemClaimsBySession(session.id);\n      const payments = await storage.getPaymentsBySession(session.id);\n\n      res.json({\n        session,\n        participants,\n        billItems,\n        itemClaims,\n        payments\n      });\n    } catch (error) {\n      console.error('Get session error:', error);\n      res.status(500).json({ message: 'Failed to retrieve session' });\n    }\n  });\n\n  // Create bill items for session\n  app.post('/api/sessions/:id/items', async (req, res) => {\n    try {\n      const { items } = req.body;\n      const sessionId = req.params.id;\n      \n      const itemsWithSession = items.map((item: any) => ({\n        ...item,\n        sessionId\n      }));\n      \n      const createdItems = await storage.createBillItems(itemsWithSession);\n      \n      broadcastToSession(sessionId, {\n        type: 'items-updated',\n        items: createdItems\n      });\n      \n      res.json(createdItems);\n    } catch (error) {\n      console.error('Create bill items error:', error);\n      res.status(400).json({ message: 'Failed to create bill items' });\n    }\n  });\n\n  // Join session as participant\n  app.post('/api/sessions/:id/join', async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      const session = await storage.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      const participantData = insertParticipantSchema.parse({\n        ...req.body,\n        sessionId\n      });\n      \n      const participant = await storage.createParticipant(participantData);\n      \n      // For equal split mode, recalculate expected amounts for all participants\n      if (session.splitMode === 'equal') {\n        const allParticipants = await storage.getParticipantsBySession(sessionId);\n        const totalAmount = parseFloat(session.totalAmount);\n        const participantCount = allParticipants.length;\n        const expectedAmountPerPerson = (totalAmount / participantCount).toFixed(2);\n        \n        // Update expected amount for all participants\n        for (const p of allParticipants) {\n          await storage.updateParticipant(p.id, {\n            expectedAmount: expectedAmountPerPerson\n          });\n        }\n      }\n      \n      broadcastToSession(sessionId, {\n        type: 'participant-joined',\n        participant\n      });\n      \n      res.json(participant);\n    } catch (error) {\n      console.error('Join session error:', error);\n      res.status(400).json({ message: 'Failed to join session' });\n    }\n  });\n\n  // Claim items (Pay Your Part mode)\n  app.post('/api/sessions/:id/claim-items', async (req, res) => {\n    try {\n      const { participantId, itemClaims } = req.body;\n      const sessionId = req.params.id;\n      \n      // Delete existing claims for this participant\n      const existingClaims = await storage.getItemClaimsBySession(sessionId);\n      for (const claim of existingClaims) {\n        if (claim.participantId === participantId) {\n          await storage.deleteItemClaim(claim.participantId, claim.billItemId);\n        }\n      }\n      \n      // Create new claims\n      const createdClaims = [];\n      for (const claim of itemClaims) {\n        const newClaim = await storage.createItemClaim({\n          participantId,\n          billItemId: claim.billItemId,\n          quantity: claim.quantity\n        });\n        createdClaims.push(newClaim);\n      }\n      \n      // Calculate expected amount for participant\n      const billItems = await storage.getBillItemsBySession(sessionId);\n      let expectedAmount = 0;\n      \n      for (const claim of createdClaims) {\n        const item = billItems.find(i => i.id === claim.billItemId);\n        if (item) {\n          expectedAmount += parseFloat(item.price) * claim.quantity;\n        }\n      }\n      \n      await storage.updateParticipant(participantId, {\n        expectedAmount: expectedAmount.toFixed(2)\n      });\n      \n      broadcastToSession(sessionId, {\n        type: 'items-claimed',\n        participantId,\n        claims: createdClaims,\n        expectedAmount\n      });\n      \n      res.json({ claims: createdClaims, expectedAmount });\n    } catch (error) {\n      console.error('Claim items error:', error);\n      res.status(400).json({ message: 'Failed to claim items' });\n    }\n  });\n\n  // Process payment (for participants paying to main booker)\n  app.post('/api/sessions/:id/pay', async (req, res) => {\n    try {\n      const { participantId, amount } = req.body;\n      const sessionId = req.params.id;\n      \n      // Get session and main booker info\n      const session = await storage.getSession(sessionId);\n      const participants = await storage.getParticipantsBySession(sessionId);\n      const mainBooker = participants.find(p => p.isMainBooker);\n      \n      if (!session || !mainBooker) {\n        return res.status(404).json({ message: 'Session or main booker not found' });\n      }\n      \n      // Create payment record (participant pays to main booker's account)\n      const payment = await storage.createPayment({\n        sessionId,\n        participantId,\n        amount: amount.toString(),\n        status: 'completed' // Simulated banking payment always succeeds\n      });\n      \n      // Update participant as paid\n      await storage.updateParticipant(participantId, {\n        hasPaid: true,\n        paidAmount: amount.toString()\n      });\n      \n      // Broadcast real-time update to all session participants\n      broadcastToSession(sessionId, {\n        type: 'participant-payment-completed',\n        participantId,\n        participant: await storage.getParticipant(participantId),\n        payment\n      });\n      \n      // Check if all participants have paid\n      const updatedParticipants = await storage.getParticipantsBySession(sessionId);\n      const allPaid = updatedParticipants.every(p => p.hasPaid);\n      \n      if (allPaid) {\n        await storage.updateSession(sessionId, { isActive: false });\n        broadcastToSession(sessionId, {\n          type: 'session-completed'\n        });\n      }\n      \n      res.json(payment);\n    } catch (error) {\n      console.error('Payment error:', error);\n      res.status(400).json({ message: 'Payment failed' });\n    }\n  });\n\n  // Initiate banking payment flow  \n  app.post('/api/sessions/:id/initiate-payment', async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      \n      // Get session data\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      const participants = await storage.getParticipantsBySession(sessionId);\n      const mainBooker = participants.find(p => p.isMainBooker);\n      \n      if (!mainBooker) {\n        return res.status(400).json({ message: 'Main booker not found' });\n      }\n      \n      // Return payment initialization data\n      res.json({\n        success: true,\n        sessionId,\n        amount: session.totalAmount,\n        recipient: session.restaurantName,\n        description: `${session.restaurantName} - Tafel ${session.tableNumber}`,\n        mainBooker: mainBooker.name\n      });\n      \n    } catch (error) {\n      console.error('Payment initiation error:', error);\n      res.status(500).json({ message: 'Failed to initiate payment' });\n    }\n  });\n\n  // Complete banking payment (called after successful banking flow)\n  app.post('/api/sessions/:id/complete-payment', async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      \n      // Get session and participants\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      const participants = await storage.getParticipantsBySession(sessionId);\n      const mainBooker = participants.find(p => p.isMainBooker);\n      \n      if (!mainBooker) {\n        return res.status(400).json({ message: 'Main booker not found' });\n      }\n      \n      const totalAmount = parseFloat(session.totalAmount);\n      \n      // Create payment record for the full amount\n      const payment = await storage.createPayment({\n        sessionId,\n        participantId: mainBooker.id,\n        amount: totalAmount.toString(),\n        status: 'completed'\n      });\n      \n      // Mark main booker as having paid the full amount\n      await storage.updateParticipant(mainBooker.id, {\n        hasPaid: true,\n        paidAmount: totalAmount.toString()\n      });\n      \n      // Mark all other participants as paid (since main booker covered them)\n      for (const participant of participants) {\n        if (!participant.isMainBooker) {\n          await storage.updateParticipant(participant.id, {\n            hasPaid: true,\n            paidAmount: participant.expectedAmount || '0'\n          });\n        }\n      }\n      \n      // Mark session as completed\n      await storage.updateSession(sessionId, { isActive: false });\n      \n      // Broadcast session completion\n      broadcastToSession(sessionId, {\n        type: 'session-completed'\n      });\n      \n      res.json({ \n        success: true, \n        payment,\n        message: 'Payment completed successfully via banking app'\n      });\n      \n    } catch (error) {\n      console.error('Payment completion error:', error);\n      res.status(500).json({ message: 'Failed to complete payment' });\n    }\n  });\n\n  // Main booker pays full bill (legacy endpoint - kept for compatibility)\n  app.post('/api/sessions/:id/pay-full', async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      \n      // Get session and participants\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      const participants = await storage.getParticipantsBySession(sessionId);\n      const mainBooker = participants.find(p => p.isMainBooker);\n      \n      if (!mainBooker) {\n        return res.status(400).json({ message: 'Main booker not found' });\n      }\n      \n      const totalAmount = parseFloat(session.totalAmount);\n      \n      // Create payment record for the full amount\n      const payment = await storage.createPayment({\n        sessionId,\n        participantId: mainBooker.id,\n        amount: totalAmount.toString(),\n        status: 'completed'\n      });\n      \n      // Mark main booker as having paid the full amount\n      await storage.updateParticipant(mainBooker.id, {\n        hasPaid: true,\n        paidAmount: totalAmount.toString()\n      });\n      \n      // Mark all other participants as paid (since main booker covered them)\n      for (const participant of participants) {\n        if (!participant.isMainBooker) {\n          await storage.updateParticipant(participant.id, {\n            hasPaid: true,\n            paidAmount: participant.expectedAmount || '0'\n          });\n        }\n      }\n      \n      // Mark session as completed\n      await storage.updateSession(sessionId, { isActive: false });\n      \n      // Broadcast session completion\n      broadcastToSession(sessionId, {\n        type: 'session-completed'\n      });\n      \n      res.json({ \n        success: true, \n        payment,\n        message: 'Full bill paid successfully'\n      });\n      \n    } catch (error) {\n      console.error('Full payment error:', error);\n      res.status(400).json({ message: 'Failed to process full payment' });\n    }\n  });\n\n  // Tink OAuth2 callback\n  app.get('/auth/tink/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n      \n      // Handle OAuth errors\n      if (error) {\n        console.error('OAuth error:', error);\n        const errorUrl = `/tink-callback?bank_linked=error&error=${encodeURIComponent(error as string)}`;\n        return res.redirect(errorUrl);\n      }\n      \n      if (!code || !state) {\n        console.error('Missing authorization code or state');\n        return res.redirect('/tink-callback?bank_linked=error&error=missing_params');\n      }\n      \n      console.log('Tink callback received with code and state');\n      \n      // Generate the same redirect URI that was used in the authorization request\n      const protocol = req.headers['x-forwarded-proto'] || (req.secure ? 'https' : 'http');\n      const host = req.headers.host;\n      const redirectUri = `${protocol}://${host}/auth/tink/callback`;\n      \n      // Exchange code for access token\n      const tokenData = await exchangeCodeForToken(code as string, redirectUri);\n      \n      if (!tokenData.access_token) {\n        console.error('Failed to get access token');\n        return res.redirect('/tink-callback?bank_linked=error&error=no_token');\n      }\n      \n      console.log('Access token obtained successfully');\n      \n      // Get IBAN and account info from Tink\n      const accountInfo = await getIbanFromTink(tokenData.access_token);\n      \n      if (!accountInfo) {\n        console.error('Could not retrieve account information');\n        return res.redirect('/tink-callback?bank_linked=error&error=no_account_info');\n      }\n      \n      console.log('Account info retrieved:', { iban: accountInfo.iban.substring(0, 4) + '****', accountHolder: accountInfo.accountHolder });\n      \n      // Prepare bank data for frontend\n      const bankData = {\n        iban: accountInfo.iban,\n        accountHolder: accountInfo.accountHolder,\n        accessToken: tokenData.access_token\n      };\n      \n      // Redirect to callback page with success data\n      const redirectUrl = `/tink-callback?bank_linked=success&data=${encodeURIComponent(JSON.stringify(bankData))}`;\n      res.redirect(redirectUrl);\n      \n    } catch (error) {\n      console.error('Tink callback error:', error);\n      res.redirect('/tink-callback?bank_linked=error&error=server_error');\n    }\n  });\n  \n  // Link bank account to session\n  app.post('/api/sessions/:id/link-bank', async (req, res) => {\n    try {\n      const { iban, accountHolder, accessToken } = req.body;\n      const sessionId = req.params.id;\n      \n      if (!iban || !accountHolder) {\n        return res.status(400).json({ message: 'IBAN and account holder name are required' });\n      }\n      \n      await storage.updateSession(sessionId, {\n        linkedIban: iban,\n        accountHolderName: accountHolder,\n        tinkAccessToken: accessToken // In production: encrypt this\n      });\n      \n      broadcastToSession(sessionId, {\n        type: 'bank-linked',\n        iban,\n        accountHolder\n      });\n      \n      res.json({ success: true, iban, accountHolder });\n      \n    } catch (error) {\n      console.error('Link bank error:', error);\n      res.status(500).json({ message: 'Failed to link bank account' });\n    }\n  });\n\n  // Mock Bank API Routes\n  \n  // Get list of available Belgian banks\n  app.get('/api/mock-banks', (req, res) => {\n    try {\n      const banks = MockBankService.getBankList();\n      res.json(banks);\n    } catch (error) {\n      console.error('Error fetching banks:', error);\n      res.status(500).json({ message: 'Failed to fetch banks' });\n    }\n  });\n\n  // Get accounts for a specific bank\n  app.get('/api/mock-banks/:bankId/accounts', (req, res) => {\n    try {\n      const { bankId } = req.params;\n      const accounts = MockBankService.getBankAccounts(bankId);\n      \n      if (accounts.length === 0) {\n        return res.status(404).json({ message: 'Bank not found or no accounts available' });\n      }\n      \n      res.json(accounts);\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      res.status(500).json({ message: 'Failed to fetch accounts' });\n    }\n  });\n\n  // Authenticate with mock bank\n  app.post('/api/mock-banks/authenticate', async (req, res) => {\n    try {\n      const { bankId, accountId, state } = req.body;\n      \n      if (!bankId || !accountId || !state) {\n        return res.status(400).json({ \n          success: false, \n          error: 'missing_parameters' \n        });\n      }\n\n      const result = await MockBankService.authenticateWithBank({\n        bankId,\n        accountId,\n        state\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Mock bank authentication error:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'server_error' \n      });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":24946},"server/storage.ts":{"content":"import { \n  sessions, \n  participants, \n  billItems, \n  itemClaims, \n  payments,\n  type Session, \n  type InsertSession,\n  type Participant,\n  type InsertParticipant,\n  type BillItem,\n  type InsertBillItem,\n  type ItemClaim,\n  type InsertItemClaim,\n  type Payment,\n  type InsertPayment\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Sessions\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(id: string): Promise<Session | undefined>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined>;\n  \n  // Participants\n  createParticipant(participant: InsertParticipant): Promise<Participant>;\n  getParticipant(id: string): Promise<Participant | undefined>;\n  getParticipantsBySession(sessionId: string): Promise<Participant[]>;\n  updateParticipant(id: string, updates: Partial<Participant>): Promise<Participant | undefined>;\n  \n  // Bill Items\n  createBillItems(items: InsertBillItem[]): Promise<BillItem[]>;\n  getBillItemsBySession(sessionId: string): Promise<BillItem[]>;\n  updateBillItem(id: string, updates: Partial<BillItem>): Promise<BillItem | undefined>;\n  \n  // Item Claims\n  createItemClaim(claim: InsertItemClaim): Promise<ItemClaim>;\n  getItemClaimsBySession(sessionId: string): Promise<ItemClaim[]>;\n  deleteItemClaim(participantId: string, billItemId: string): Promise<void>;\n  \n  // Payments\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPaymentsBySession(sessionId: string): Promise<Payment[]>;\n  updatePayment(id: string, updates: Partial<Payment>): Promise<Payment | undefined>;\n  \n  // Mock POS system\n  getMockBillData(tableNumber: string, restaurantName: string): Promise<{ items: Omit<InsertBillItem, 'sessionId'>[], totalAmount: string } | null>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createSession(session: InsertSession): Promise<Session> {\n    const [newSession] = await db\n      .insert(sessions)\n      .values(session)\n      .returning();\n    return newSession;\n  }\n\n  async getSession(id: string): Promise<Session | undefined> {\n    const [session] = await db.select().from(sessions).where(eq(sessions.id, id));\n    return session || undefined;\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined> {\n    const [updated] = await db\n      .update(sessions)\n      .set(updates)\n      .where(eq(sessions.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async createParticipant(participant: InsertParticipant): Promise<Participant> {\n    const [newParticipant] = await db\n      .insert(participants)\n      .values(participant)\n      .returning();\n    return newParticipant;\n  }\n\n  async getParticipant(id: string): Promise<Participant | undefined> {\n    const [participant] = await db.select().from(participants).where(eq(participants.id, id));\n    return participant || undefined;\n  }\n\n  async getParticipantsBySession(sessionId: string): Promise<Participant[]> {\n    return await db.select().from(participants).where(eq(participants.sessionId, sessionId));\n  }\n\n  async updateParticipant(id: string, updates: Partial<Participant>): Promise<Participant | undefined> {\n    const [updated] = await db\n      .update(participants)\n      .set(updates)\n      .where(eq(participants.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async createBillItems(items: InsertBillItem[]): Promise<BillItem[]> {\n    return await db\n      .insert(billItems)\n      .values(items)\n      .returning();\n  }\n\n  async getBillItemsBySession(sessionId: string): Promise<BillItem[]> {\n    return await db.select().from(billItems).where(eq(billItems.sessionId, sessionId));\n  }\n\n  async updateBillItem(id: string, updates: Partial<BillItem>): Promise<BillItem | undefined> {\n    const [updated] = await db\n      .update(billItems)\n      .set(updates)\n      .where(eq(billItems.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async createItemClaim(claim: InsertItemClaim): Promise<ItemClaim> {\n    const [newClaim] = await db\n      .insert(itemClaims)\n      .values(claim)\n      .returning();\n    return newClaim;\n  }\n\n  async getItemClaimsBySession(sessionId: string): Promise<ItemClaim[]> {\n    return await db\n      .select({\n        id: itemClaims.id,\n        participantId: itemClaims.participantId,\n        billItemId: itemClaims.billItemId,\n        quantity: itemClaims.quantity,\n        createdAt: itemClaims.createdAt,\n      })\n      .from(itemClaims)\n      .innerJoin(participants, eq(itemClaims.participantId, participants.id))\n      .where(eq(participants.sessionId, sessionId));\n  }\n\n  async deleteItemClaim(participantId: string, billItemId: string): Promise<void> {\n    await db\n      .delete(itemClaims)\n      .where(\n        and(\n          eq(itemClaims.participantId, participantId),\n          eq(itemClaims.billItemId, billItemId)\n        )\n      );\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db\n      .insert(payments)\n      .values(payment)\n      .returning();\n    return newPayment;\n  }\n\n  async getPaymentsBySession(sessionId: string): Promise<Payment[]> {\n    return await db.select().from(payments).where(eq(payments.sessionId, sessionId));\n  }\n\n  async updatePayment(id: string, updates: Partial<Payment>): Promise<Payment | undefined> {\n    const [updated] = await db\n      .update(payments)\n      .set(updates)\n      .where(eq(payments.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getMockBillData(tableNumber: string, restaurantName: string): Promise<{ items: Omit<InsertBillItem, 'sessionId'>[], totalAmount: string } | null> {\n    // Mock POS system data - in real implementation this would call an external API\n    const mockBills: Record<string, { items: Omit<InsertBillItem, 'sessionId'>[], totalAmount: string }> = {\n      \"De Blauwe Kater-12\": {\n        items: [\n          { name: \"Gentse Waterzooi\", price: \"18.50\", quantity: 1, availableQuantity: 1 },\n          { name: \"Vlaamse Stoofpot\", price: \"22.00\", quantity: 1, availableQuantity: 1 },\n          { name: \"Frieten met Mayo\", price: \"6.50\", quantity: 2, availableQuantity: 2 },\n          { name: \"Duvel (33cl)\", price: \"4.20\", quantity: 2, availableQuantity: 2 },\n          { name: \"Jupiler (25cl)\", price: \"3.50\", quantity: 1, availableQuantity: 1 },\n          { name: \"Belgische Wafels\", price: \"8.00\", quantity: 1, availableQuantity: 1 },\n        ],\n        totalAmount: \"73.40\"\n      }\n    };\n\n    const key = `${restaurantName}-${tableNumber}`;\n    return mockBills[key] || null;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6685},"server/tink-integration.ts":{"content":"// Tink API integration for bank account linking\n// Using Tink's PSD2 API for Belgian banks\n\nconst TINK_BASE_URL = 'https://api.tink.com';\nconst TINK_CLIENT_ID = process.env.TINK_CLIENT_ID!;\nconst TINK_REDIRECT_URI = process.env.TINK_REDIRECT_URI!;\n\ninterface TinkTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token?: string;\n  scope: string;\n}\n\ninterface TinkAccount {\n  id: string;\n  name: string;\n  type: string;\n  accountNumber: {\n    iban?: string;\n    bban?: string;\n  };\n  holderName: string;\n  balance: {\n    amount: number;\n    currencyCode: string;\n  };\n}\n\ninterface AccountInfo {\n  iban: string;\n  accountHolder: string;\n}\n\nexport async function exchangeCodeForToken(authorizationCode: string, redirectUri: string): Promise<TinkTokenResponse> {\n  try {\n    // For public client OAuth2 flow (no client_secret required)\n    const response = await fetch(`${TINK_BASE_URL}/api/v1/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'authorization_code',\n        code: authorizationCode,\n        redirect_uri: redirectUri,\n        client_id: TINK_CLIENT_ID\n      })\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Token exchange failed:', response.status, response.statusText, errorText);\n      throw new Error(`Token exchange failed: ${response.status} ${response.statusText}`);\n    }\n\n    const tokenData = await response.json();\n    console.log('Token exchange successful');\n    return tokenData;\n  } catch (error) {\n    console.error('Error exchanging code for token:', error);\n    \n    // Return mock data for development/demo purposes\n    console.log('Using mock token data for demo');\n    return {\n      access_token: 'demo_access_token_' + Math.random().toString(36).substring(7),\n      token_type: 'Bearer',\n      expires_in: 3600,\n      scope: 'accounts:read'\n    };\n  }\n}\n\nexport async function getIbanFromTink(accessToken: string): Promise<AccountInfo | null> {\n  try {\n    const response = await fetch(`${TINK_BASE_URL}/data/v2/accounts`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch accounts: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const accounts: TinkAccount[] = data.accounts || [];\n\n    // Find the first account with an IBAN\n    const primaryAccount = accounts.find(account => \n      account.accountNumber?.iban && \n      account.type === 'CHECKING'\n    );\n\n    if (!primaryAccount || !primaryAccount.accountNumber.iban) {\n      throw new Error('No checking account with IBAN found');\n    }\n\n    return {\n      iban: primaryAccount.accountNumber.iban,\n      accountHolder: primaryAccount.holderName || 'Account Holder'\n    };\n\n  } catch (error) {\n    console.error('Error fetching IBAN from Tink:', error);\n    \n    // Return mock data for development/demo purposes\n    const mockIbans = [\n      'BE68539007547034',\n      'BE02230041544780', \n      'BE86796456123890',\n      'BE43096123456769'\n    ];\n    \n    const mockNames = [\n      'Jan Peeters',\n      'Marie Dubois', \n      'Pieter Janssens',\n      'Sophie Van Den Berg'\n    ];\n    \n    const randomIndex = Math.floor(Math.random() * mockIbans.length);\n    \n    return {\n      iban: mockIbans[randomIndex],\n      accountHolder: mockNames[randomIndex]\n    };\n  }\n}\n\nexport async function validateBankConnection(accessToken: string): Promise<boolean> {\n  try {\n    const response = await fetch(`${TINK_BASE_URL}/data/v2/accounts`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    return response.ok;\n  } catch (error) {\n    console.error('Error validating bank connection:', error);\n    return false;\n  }\n}","size_bytes":3999},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  restaurantName: text(\"restaurant_name\").notNull(),\n  tableNumber: text(\"table_number\").notNull(),\n  splitMode: text(\"split_mode\").notNull(), // 'equal' or 'items'\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  participantCount: integer(\"participant_count\").default(4),\n  isActive: boolean(\"is_active\").default(true),\n  mainBookerId: varchar(\"main_booker_id\"),\n  // Bank account info from Tink\n  linkedIban: text(\"linked_iban\"),\n  accountHolderName: text(\"account_holder_name\"),\n  tinkAccessToken: text(\"tink_access_token\"), // Store encrypted in production\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const participants = pgTable(\"participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => sessions.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  bankAccount: text(\"bank_account\"),\n  isMainBooker: boolean(\"is_main_booker\").default(false),\n  hasPaid: boolean(\"has_paid\").default(false),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  expectedAmount: decimal(\"expected_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const billItems = pgTable(\"bill_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => sessions.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  availableQuantity: integer(\"available_quantity\").notNull(),\n});\n\nexport const itemClaims = pgTable(\"item_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participantId: varchar(\"participant_id\").notNull().references(() => participants.id, { onDelete: \"cascade\" }),\n  billItemId: varchar(\"bill_item_id\").notNull().references(() => billItems.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => sessions.id, { onDelete: \"cascade\" }),\n  participantId: varchar(\"participant_id\").notNull().references(() => participants.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'completed', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const sessionsRelations = relations(sessions, ({ many, one }) => ({\n  participants: many(participants),\n  billItems: many(billItems),\n  payments: many(payments),\n  mainBooker: one(participants, {\n    fields: [sessions.mainBookerId],\n    references: [participants.id],\n  }),\n}));\n\nexport const participantsRelations = relations(participants, ({ one, many }) => ({\n  session: one(sessions, {\n    fields: [participants.sessionId],\n    references: [sessions.id],\n  }),\n  itemClaims: many(itemClaims),\n  payments: many(payments),\n}));\n\nexport const billItemsRelations = relations(billItems, ({ one, many }) => ({\n  session: one(sessions, {\n    fields: [billItems.sessionId],\n    references: [sessions.id],\n  }),\n  claims: many(itemClaims),\n}));\n\nexport const itemClaimsRelations = relations(itemClaims, ({ one }) => ({\n  participant: one(participants, {\n    fields: [itemClaims.participantId],\n    references: [participants.id],\n  }),\n  billItem: one(billItems, {\n    fields: [itemClaims.billItemId],\n    references: [billItems.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  session: one(sessions, {\n    fields: [payments.sessionId],\n    references: [sessions.id],\n  }),\n  participant: one(participants, {\n    fields: [payments.participantId],\n    references: [participants.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertParticipantSchema = createInsertSchema(participants).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillItemSchema = createInsertSchema(billItems).omit({\n  id: true,\n});\n\nexport const insertItemClaimSchema = createInsertSchema(itemClaims).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Participant = typeof participants.$inferSelect;\nexport type InsertParticipant = z.infer<typeof insertParticipantSchema>;\nexport type BillItem = typeof billItems.$inferSelect;\nexport type InsertBillItem = z.infer<typeof insertBillItemSchema>;\nexport type ItemClaim = typeof itemClaims.$inferSelect;\nexport type InsertItemClaim = z.infer<typeof insertItemClaimSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n","size_bytes":5555},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Session from \"@/pages/session\";\nimport TinkCallback from \"@/pages/tink-callback\";\nimport TableQR from \"@/pages/table-qr\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport ParticipantJoin from \"@/pages/participant-join\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/session/:id\" component={Session} />\n      <Route path=\"/join/:sessionId\" component={ParticipantJoin} />\n      <Route path=\"/payment-success/:sessionId\" component={PaymentSuccess} />\n      <Route path=\"/auth/tink/callback\" component={TinkCallback} />\n      <Route path=\"/table-qr\" component={TableQR} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1261},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Exact Monarch Money iOS App Colors */\n  --background: #FFFFFF; /* Pure white */\n  --background-muted: #F9FAFB; /* Off-white background */\n  --foreground: #111827; /* Dark gray for text */\n  --muted: #F3F4F6; /* Light gray backgrounds */\n  --muted-foreground: #9CA3AF; /* Medium gray text */\n  --popover: #FFFFFF;\n  --popover-foreground: #111827;\n  --card: #FFFFFF;\n  --card-foreground: #111827;\n  --border: #D1D5DB; /* Light gray borders */\n  --input: #F9FAFB;\n  --primary: #F97316; /* Vibrant orange */\n  --primary-foreground: #FFFFFF;\n  --secondary: #F3F4F6;\n  --secondary-foreground: #111827;\n  --accent: #FB923C; /* Light orange */\n  --accent-foreground: #FFFFFF;\n  --destructive: #EF4444;\n  --destructive-foreground: #FFFFFF;\n  --ring: #F97316;\n  --radius: 1rem; /* rounded-2xl equivalent */\n  \n  /* Monarch iOS specific colors - Orange theme */\n  --monarch-primary: #F97316; /* Vibrant orange */\n  --monarch-purple: #FB923C; /* Light orange */\n  --monarch-green: #FED7AA; /* Peach */\n  --monarch-orange: #FFEDD5; /* Very light orange */\n  --monarch-gray-400: #9CA3AF; /* Medium gray */\n  --monarch-gray-300: #D1D5DB; /* Light gray */\n  --monarch-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --monarch-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n.dark {\n  /* Monarch Money Dark Mode */\n  --background: #1F2937; /* Dark background */\n  --background-muted: #111827; /* Darker background */\n  --foreground: #F9FAFB; /* Light text */\n  --muted: #374151; /* Dark gray backgrounds */\n  --muted-foreground: #9CA3AF; /* Medium gray text */\n  --popover: #1F2937;\n  --popover-foreground: #F9FAFB;\n  --card: #1F2937;\n  --card-foreground: #F9FAFB;\n  --border: #374151; /* Dark borders */\n  --input: #111827;\n  --primary: #F97316; /* Keep vibrant colors */\n  --primary-foreground: #FFFFFF;\n  --secondary: #374151;\n  --secondary-foreground: #F9FAFB;\n  --accent: #FB923C;\n  --accent-foreground: #FFFFFF;\n  --destructive: #EF4444;\n  --destructive-foreground: #FFFFFF;\n  --ring: #F97316;\n  \n  /* Dark mode specific - Orange theme */\n  --monarch-primary: #F97316;\n  --monarch-purple: #FB923C;\n  --monarch-green: #FED7AA;\n  --monarch-orange: #FFEDD5;\n  --monarch-gray-400: #9CA3AF;\n  --monarch-gray-300: #6B7280;\n  --monarch-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\n  --monarch-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.4), 0 4px 6px -2px rgba(0, 0, 0, 0.3);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html {\n    font-family: system-ui, -apple-system, \"SF Pro Display\", sans-serif;\n    height: 100%;\n    height: -webkit-fill-available;\n    /* Performance optimizations */\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n    @apply antialiased text-foreground;\n    font-family: system-ui, -apple-system, \"SF Pro Display\", sans-serif;\n    background: url('@assets/a76a0c1a-43da-4af1-92f3-6326f9b4de38_1754313248853.jpg') no-repeat center center fixed;\n    background-size: cover;\n    background-attachment: fixed;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n    overflow-x: hidden;\n    /* Performance optimizations */\n    will-change: transform;\n    backface-visibility: hidden;\n    transform: translateZ(0);\n  }\n  \n  #root {\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n@layer utilities {\n  .font-sf {\n    font-family: system-ui, -apple-system, \"SF Pro Display\", sans-serif;\n  }\n  \n  .active-scale-98:active {\n    transform: scale(0.98);\n  }\n  \n  /* Monarch iOS Widget Cards - Mobile Optimized */\n  .monarch-widget {\n    @apply bg-white rounded-xl p-3 transition-all duration-200;\n    box-shadow: var(--monarch-shadow);\n  }\n  \n  .monarch-widget:hover {\n    box-shadow: var(--monarch-shadow-lg);\n    transform: translateY(-1px);\n  }\n  \n  .monarch-card {\n    @apply bg-white rounded-xl p-3 border border-gray-200 transition-all duration-200;\n  }\n  \n  .monarch-card:hover {\n    @apply shadow-md;\n    transform: translateY(-1px);\n  }\n  \n  /* Monarch iOS Buttons - Mobile Optimized */\n  .monarch-btn {\n    @apply px-4 py-2.5 rounded-xl font-semibold text-sm transition-all duration-200;\n    box-shadow: var(--monarch-shadow);\n  }\n  \n  .monarch-btn:active {\n    transform: scale(0.98);\n  }\n  \n  .monarch-btn-primary {\n    @apply text-white;\n    background: var(--monarch-primary);\n  }\n  \n  .monarch-btn-primary:hover {\n    background: #EA580C;\n  }\n  \n  .monarch-btn-secondary {\n    @apply bg-gray-100 text-gray-900;\n  }\n  \n  .monarch-btn-secondary:hover {\n    @apply bg-gray-200;\n  }\n  \n  /* Icon Buttons */\n  .monarch-icon-btn {\n    @apply w-10 h-10 rounded-full flex items-center justify-center transition-all duration-150;\n  }\n  \n  .monarch-icon-btn:hover {\n    @apply bg-gray-100;\n  }\n  \n  /* Monarch Typography - Mobile Optimized */\n  .monarch-title {\n    @apply text-lg font-semibold text-gray-900;\n  }\n  \n  .monarch-section-title {\n    @apply text-sm uppercase tracking-wide text-gray-500 font-medium;\n  }\n  \n  .monarch-body {\n    @apply text-sm text-gray-600 leading-relaxed;\n  }\n  \n  .monarch-caption {\n    @apply text-sm text-gray-500;\n  }\n  \n  /* Legacy Support - Keep old classes working during transition */\n  .parti-card {\n    @apply monarch-card;\n  }\n  \n  .parti-card-elevated {\n    @apply monarch-widget;\n  }\n  \n  .parti-button {\n    @apply monarch-btn;\n  }\n  \n  .parti-button-primary {\n    @apply monarch-btn-primary;\n  }\n  \n  .parti-button-secondary {\n    @apply monarch-btn-secondary;\n  }\n  \n  /* Custom scrollbar for mobile */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary));\n    border-radius: 2px;\n  }\n  \n  .full-viewport {\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n  }\n}\n\n/* PWA specific styles */\n@media (display-mode: standalone) {\n  body {\n    -webkit-user-select: none;\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n}\n\n/* Mobile optimizations - iPhone 15 Specific */\n@media (max-width: 768px) {\n  .max-w-sm {\n    max-width: 100%;\n  }\n  \n  /* Ensure full viewport height on mobile */\n  .min-h-screen {\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n  }\n  \n  .parti-container {\n    width: 100vw;\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n    padding: 0;\n    margin: 0;\n    background: var(--background-muted);\n  }\n  \n  .monarch-container {\n    @apply min-h-screen;\n    background: var(--background-muted);\n  }\n  \n  /* Mobile specific compact styles */\n  .monarch-widget {\n    @apply p-2 rounded-lg;\n  }\n  \n  .monarch-card {\n    @apply p-2.5 rounded-lg;\n  }\n  \n  .monarch-btn {\n    @apply px-3 py-2 text-xs rounded-lg;\n  }\n  \n  .monarch-title {\n    @apply text-base;\n  }\n  \n  .monarch-body {\n    @apply text-xs;\n  }\n  \n  .monarch-caption {\n    @apply text-xs;\n  }\n}\n\n/* Touch-friendly interactions - Mobile Optimized */\nbutton, .button, [role=\"button\"] {\n  -webkit-tap-highlight-color: transparent;\n  touch-action: manipulation;\n  min-height: 40px;\n  min-width: 40px;\n}\n\n/* Enhanced touch targets - Mobile Optimized */\n.touch-target {\n  min-height: 40px;\n  min-width: 40px;\n  padding: 8px 12px;\n}\n\n/* Smooth animations for better UX */\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.2s ease-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Loading animation */\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* QR Scanner with neutral colors */\n.qr-scanner-overlay {\n  background: linear-gradient(\n    45deg,\n    transparent 30%,\n    rgba(0, 0, 0, 0.05) 30%,\n    rgba(0, 0, 0, 0.05) 70%,\n    transparent 70%\n  );\n  animation: scan-line 2s linear infinite;\n}\n\n/* Monarch Money utilities */\n.parti-surface-muted {\n  background: var(--parti-surface-muted);\n}\n\n/* Monarch Color Utilities */\n.text-monarch-primary {\n  color: var(--monarch-primary);\n}\n\n.text-monarch-purple {\n  color: var(--monarch-purple);\n}\n\n.text-monarch-green {\n  color: var(--monarch-green);\n}\n\n.text-monarch-orange {\n  color: var(--monarch-orange);\n}\n\n.bg-monarch-primary {\n  background: var(--monarch-primary);\n}\n\n.bg-monarch-purple {\n  background: var(--monarch-purple);\n}\n\n.bg-monarch-green {\n  background: var(--monarch-green);\n}\n\n.bg-monarch-orange {\n  background: var(--monarch-orange);\n}\n\n/* Legacy Support */\n.parti-text-primary {\n  color: var(--monarch-primary);\n}\n\n.parti-text-accent {\n  color: var(--monarch-green);\n}\n\n.parti-bg-primary {\n  background: var(--monarch-primary);\n}\n\n.parti-bg-accent {\n  background: var(--monarch-green);\n}\n\n/* Monarch iOS style inputs */\n.monarch-input {\n  @apply rounded-2xl border border-gray-200 bg-white px-4 py-3 text-base transition-all;\n}\n\n.monarch-input:focus {\n  outline: none;\n  border-color: var(--monarch-primary);\n  box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.1);\n}\n\n/* Legacy input support */\n.parti-input {\n  @apply monarch-input;\n}\n\n/* Legacy Typography - Maps to Monarch styles */\n.parti-heading-1 {\n  @apply monarch-title mb-4;\n}\n\n.parti-heading-2 {\n  @apply text-lg font-semibold text-gray-900 mb-3;\n}\n\n.parti-heading-3 {\n  @apply text-base font-semibold text-gray-900 mb-2;\n}\n\n.parti-body {\n  @apply monarch-body;\n}\n\n.parti-body-semibold {\n  @apply text-base text-gray-900 leading-relaxed font-semibold;\n}\n\n.parti-small {\n  @apply monarch-caption;\n}\n\n.parti-step-indicator {\n  @apply text-base font-medium text-gray-500;\n}\n\n.parti-amount {\n  @apply font-semibold tabular-nums text-gray-900;\n}\n\n.parti-amount-large {\n  @apply text-2xl font-bold tabular-nums text-gray-900;\n}\n\n@keyframes scan-line {\n  0% { background-position: 0% 0%; }\n  100% { background-position: 100% 100%; }\n}\n\n/* Super fast performance optimizations */\n* {\n  /* Hardware acceleration for all elements */\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n/* Optimize animations for 60fps */\n@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slide-up {\n  from { \n    opacity: 0; \n    transform: translateY(10px) translateZ(0); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0) translateZ(0); \n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.15s ease-out forwards;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.2s ease-out forwards;\n}\n\n/* Fast transitions */\n.monarch-btn, .parti-btn {\n  transition: all 0.1s ease-out !important;\n}\n\n.monarch-card, .parti-card {\n  transition: transform 0.1s ease-out, box-shadow 0.1s ease-out !important;\n}\n\n/* Reduce motion for users who prefer it */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","size_bytes":11410},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/bill-display.tsx":{"content":"import { IoReceiptOutline } from \"react-icons/io5\";\n\ninterface BillItem {\n  name: string;\n  price: string;\n  quantity: number;\n}\n\ninterface BillData {\n  items: BillItem[];\n  totalAmount: string;\n}\n\ninterface BillDisplayProps {\n  billData: BillData;\n  expanded: boolean;\n  onToggleExpand: () => void;\n}\n\nexport default function BillDisplay({ billData, expanded, onToggleExpand }: BillDisplayProps) {\n  const subtotal = billData.items.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);\n  const btw = subtotal * 0.21; // 21% BTW\n  const today = new Date();\n  \n  return (\n    <div className=\"monarch-widget overflow-hidden animate-slide-up\">\n      {/* Header with icon and title */}\n      <div className=\"text-center space-y-3 p-3 border-b border-gray-200\">\n        <div className=\"w-14 h-14 rounded-full flex items-center justify-center mx-auto bg-[#f97315]\">\n          <IoReceiptOutline className=\"text-xl text-white\" />\n        </div>\n        <div>\n          <h1 className=\"monarch-title\">Rekening gevonden!</h1>\n          <p className=\"monarch-body\">Restaurant De Blauwe Kater, Tafel 12</p>\n        </div>\n      </div>\n      <button \n        className=\"w-full p-3 text-left flex items-center justify-between touch-target hover:bg-gray-50 transition-colors rounded-xl\"\n        onClick={onToggleExpand}\n        data-testid=\"button-toggle-bill\"\n      >\n        <div className=\"flex-1\">\n          \n          \n          <p className=\"text-sm text-monarch-primary mt-2 font-medium text-center\">Klik om volledige rekening te bekijken</p>\n        </div>\n        <div className=\"w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center ml-3\">\n          <i className={`fas fa-chevron-down text-monarch-primary transition-transform duration-200 text-sm ${expanded ? 'rotate-180' : ''}`}></i>\n        </div>\n      </button>\n      {expanded && (\n        <div className=\"border-t border-gray-200 bg-white p-4 font-mono text-xs animate-fade-in\" data-testid=\"bill-details\">\n          {/* POS Header */}\n          <div className=\"text-center mb-4 pb-3 border-b-2 border-gray-800\">\n            <h4 className=\"text-lg font-bold text-gray-900 mb-1\">DE BLAUWE KATER</h4>\n            <p className=\"text-gray-700\">Grote Markt 8, 9000 Gent</p>\n            <p className=\"text-gray-700\">Tel: 09-123-45-67</p>\n            <p className=\"text-gray-700\">BTW: BE0123.456.789</p>\n            <div className=\"mt-2 pt-2 border-t border-gray-400\">\n              <p className=\"font-semibold\">BON #{today.getDate().toString().padStart(2, '0')}{(today.getMonth() + 1).toString().padStart(2, '0')}{today.getFullYear().toString().slice(-2)}001</p>\n              <p>Tafel: 12 | Kassa: 01</p>\n              <p>{today.toLocaleDateString('nl-BE')} {today.toLocaleTimeString('nl-BE', { hour: '2-digit', minute: '2-digit' })}</p>\n            </div>\n          </div>\n          \n          {/* Items Header */}\n          <div className=\"border-b border-gray-400 pb-1 mb-2\">\n            <div className=\"grid grid-cols-12 gap-1 text-xs font-semibold\">\n              <div className=\"col-span-6\">ARTIKEL</div>\n              <div className=\"col-span-2 text-center\">AANTAL</div>\n              <div className=\"col-span-2 text-right\">PRIJS</div>\n              <div className=\"col-span-2 text-right\">TOTAAL</div>\n            </div>\n          </div>\n          \n          {/* Items */}\n          <div className=\"space-y-1 mb-3\">\n            {billData.items.map((item, index) => (\n              <div key={index}>\n                <div className=\"grid grid-cols-12 gap-1 text-xs\">\n                  <div className=\"col-span-6 text-gray-900\">{item.name}</div>\n                  <div className=\"col-span-2 text-center text-gray-700\">{item.quantity}</div>\n                  <div className=\"col-span-2 text-right text-gray-700\">â¬{parseFloat(item.price).toFixed(2)}</div>\n                  <div className=\"col-span-2 text-right font-semibold\">â¬{(parseFloat(item.price) * item.quantity).toFixed(2)}</div>\n                </div>\n                <div className=\"text-xs text-gray-500 ml-1\">\n                  BTW: 21% | Art.nr: {1000 + index}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Totals Section */}\n          <div className=\"border-t-2 border-gray-800 pt-2 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span>Subtotaal (excl. BTW):</span>\n              <span>â¬{(subtotal / 1.21).toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span>BTW (21%):</span>\n              <span>â¬{btw.toFixed(2)}</span>\n            </div>\n            <div className=\"border-t border-gray-600 pt-1 mt-1\">\n              <div className=\"flex justify-between text-sm font-bold\">\n                <span>TOTAAL INCL. BTW:</span>\n                <span>â¬{billData.totalAmount}</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Payment Info */}\n          <div className=\"mt-3 pt-2 border-t border-gray-400 text-xs text-gray-600\">\n            <p>Betaalmethode: Via PartiPay App</p>\n            <p>Status: In behandeling</p>\n          </div>\n          \n          {/* Footer */}\n          <div className=\"text-center text-xs text-gray-500 mt-4 pt-3 border-t border-gray-400\">\n            <p className=\"font-semibold\">Bedankt voor uw bezoek!</p>\n            <p className=\"mt-1\">Bewaar deze bon als bewijs van aankoop</p>\n            <p className=\"mt-2 text-xs\">\n              Retour binnen 7 dagen mogelijk<br/>\n              www.deblauwekatergent.be\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5666},"client/src/components/mode-setup.tsx":{"content":"import { useState, useCallback, useMemo, useTransition } from \"react\";\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { TbPlugConnected } from \"react-icons/tb\";\nimport { MdOutlinePayment, MdCallSplit } from \"react-icons/md\";\nimport { BiSolidSelectMultiple } from \"react-icons/bi\";\nimport { RiBankFill } from \"react-icons/ri\";\nimport { ChevronDown } from \"lucide-react\";\nimport BankSelector from \"@/components/bank-selector\";\n\ninterface BillItem {\n  name: string;\n  price: string;\n  quantity: number;\n}\n\ninterface BillData {\n  items: BillItem[];\n  totalAmount: string;\n}\n\ninterface ModeSetupProps {\n  splitMode: 'equal' | 'items';\n  billData: BillData;\n  onBack: () => void;\n  onContinue: (userData: any) => void;\n}\n\nexport default function ModeSetup({ splitMode, billData, onBack, onContinue }: ModeSetupProps) {\n  const [name, setName] = useState(\"\");\n  const [bankLinked, setBankLinked] = useState(false);\n  const [bankInfo, setBankInfo] = useState<{iban: string; accountHolder: string; bankName?: string; logo?: string} | null>(null);\n  const [participantCount, setParticipantCount] = useState(4);\n  const [selectedItems, setSelectedItems] = useState<Record<number, number>>({});\n  const [itemsExpanded, setItemsExpanded] = useState(true);\n  const [showBankSelector, setShowBankSelector] = useState(false);\n  const [isPending, startTransition] = useTransition();\n  \n  // Memoize original quantities for performance\n  const originalQuantities = useMemo(() => {\n    const initial: Record<number, number> = {};\n    billData.items.forEach((item, index) => {\n      initial[index] = item.quantity;\n    });\n    return initial;\n  }, [billData.items]);\n  \n  const { toast } = useToast();\n\n  // Check for bank linking success on component mount\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const bankLinked = urlParams.get('bank_linked');\n    \n    if (bankLinked === 'success') {\n      const storedBankInfo = sessionStorage.getItem('partipay_bank_info');\n      if (storedBankInfo) {\n        try {\n          const bankData = JSON.parse(storedBankInfo);\n          setBankInfo({\n            iban: bankData.iban,\n            accountHolder: bankData.accountHolder\n          });\n          setBankLinked(true);\n          sessionStorage.removeItem('partipay_bank_info');\n          \n          toast({\n            title: \"Bankrekening gekoppeld!\",\n            description: `${bankData.accountHolder} - ${bankData.iban}`,\n          });\n          \n          // Clean URL\n          window.history.replaceState({}, '', window.location.pathname);\n        } catch (error) {\n          console.error('Error parsing bank info:', error);\n        }\n      }\n    } else if (bankLinked === 'error') {\n      const error = urlParams.get('error');\n      let errorMessage = \"Er is iets misgegaan. Probeer opnieuw.\";\n      \n      switch (error) {\n        case 'invalid_state':\n          errorMessage = \"Beveiligingsfout. Probeer opnieuw.\";\n          break;\n        case 'access_denied':\n          errorMessage = \"Toegang geweigerd. Autorisatie vereist.\";\n          break;\n        case 'invalid_data':\n          errorMessage = \"Ongeldige bankgegevens ontvangen.\";\n          break;\n        case 'no_account_info':\n          errorMessage = \"Kon geen bankrekeninggegevens ophalen.\";\n          break;\n        case 'server_error':\n          errorMessage = \"Serverfout. Probeer later opnieuw.\";\n          break;\n      }\n      \n      toast({\n        title: \"Fout bij bankkoppeling\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n      // Clean URL\n      window.history.replaceState({}, '', window.location.pathname);\n    }\n  }, [toast]);\n\n\n  const handleQuantityChange = useCallback((index: number, change: number) => {\n    startTransition(() => {\n      const currentQuantity = selectedItems[index] || 0;\n      const originalQuantity = originalQuantities[index] || 0;\n      const newQuantity = Math.max(0, Math.min(originalQuantity, currentQuantity + change));\n      \n      setSelectedItems(prev => ({\n        ...prev,\n        [index]: newQuantity\n      }));\n    });\n  }, [selectedItems, originalQuantities]);\n\n  const calculateSelectedTotal = useMemo(() => {\n    return billData.items.reduce((total, item, index) => {\n      const selectedQuantity = selectedItems[index] || 0;\n      return total + parseFloat(item.price) * selectedQuantity;\n    }, 0).toFixed(2);\n  }, [billData.items, selectedItems]);\n\n  const handleLinkBank = useCallback(async () => {\n    try {\n      // Snelle simulatie voor instant feedback\n      const mockBankData = {\n        iban: 'BE68539007547034',\n        accountHolder: 'Jan Peeters',\n        bankName: 'KBC Bank',\n        logo: 'ðµ'\n      };\n      \n      // Supersnel - geen wachttijd\n      setBankInfo(mockBankData);\n      setBankLinked(true);\n      \n      toast({\n        title: \"Bankrekening gekoppeld!\",\n        description: `${mockBankData.accountHolder} - KBC Bank`,\n      });\n      \n      console.log('Mock bank account linked successfully:', mockBankData);\n      \n    } catch (error) {\n      console.error('Bank linking error:', error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon bankkoppeling niet starten. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [toast]);\n\n  const handleBankAccountSelected = (accountData: { iban: string; accountHolder: string; bankName: string; logo: string }) => {\n    setBankInfo({\n      iban: accountData.iban,\n      accountHolder: accountData.accountHolder,\n      bankName: accountData.bankName,\n      logo: accountData.logo\n    });\n    setBankLinked(true);\n    setShowBankSelector(false);\n  };\n\n  const handleContinue = () => {\n    if (!bankLinked || !bankInfo) {\n      console.error('Cannot continue: bankLinked =', bankLinked, 'bankInfo =', bankInfo);\n      toast({\n        title: \"Fout\",\n        description: \"Koppel eerst je bankrekening.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const userData = {\n        name: bankInfo.accountHolder || 'Onbekend',\n        bankAccount: bankInfo.iban, // Convert bankInfo to bankAccount string\n        ...(splitMode === 'equal' \n          ? { participantCount }\n          : { selectedItems: Object.entries(selectedItems).filter(([_, quantity]) => quantity > 0).map(([index, quantity]) => ({ index: parseInt(index), quantity })) }\n        )\n      };\n\n      console.log('Continuing with userData:', userData);\n      onContinue(userData);\n    } catch (error) {\n      console.error('Error in handleContinue:', error);\n      toast({\n        title: \"Fout\",\n        description: \"Er ging iets mis. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"monarch-container flex flex-col\">\n      <div className=\"flex-1 px-3 py-4 space-y-4\">\n        \n\n        <div className=\"space-y-6 animate-slide-up\">\n          \n        \n          <div>\n            {!bankLinked ? (\n              <div className=\"monarch-widget\">\n                <div className=\"text-center space-y-6\">\n                  <div className=\"w-20 h-20 bg-monarch-primary rounded-2xl flex items-center justify-center mx-auto\">\n                    {splitMode === 'items' ? \n                      <BiSolidSelectMultiple className=\"text-white text-3xl\" /> : \n                      <MdCallSplit className=\"text-white text-3xl\" />\n                    }\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{splitMode === 'items' ? 'Pay your Part' : 'Split the Bill'}</h3>\n                    <Label className=\"text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 block parti-heading-3 mb-4 text-left font-normal\">1) Koppel je bankrekening aan deze sessie</Label>\n                  </div>\n                  \n                  <button \n                    className=\"monarch-btn monarch-btn-primary flex items-center justify-center space-x-2 mx-auto\"\n                    onClick={handleLinkBank}\n                    data-testid=\"button-link-bank\"\n                  >\n                    <TbPlugConnected className=\"text-xl\" />\n                    <span>Koppel bankrekening</span>\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"monarch-widget bg-green-50 border-green-200\">\n                <div className=\"text-center space-y-6\">\n                  <div className=\"w-20 h-20 bg-monarch-primary rounded-2xl flex items-center justify-center mx-auto\">\n                    {splitMode === 'items' ? \n                      <BiSolidSelectMultiple className=\"text-white text-3xl\" /> : \n                      <MdCallSplit className=\"text-white text-3xl\" />\n                    }\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{splitMode === 'items' ? 'Pay your Part' : 'Split the Bill'}</h3>\n                    <div className=\"bg-white rounded-xl p-4 mb-3 border border-gray-200\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"relative w-9 h-9\">\n                            <div className=\"w-9 h-9 rounded-lg flex items-center justify-center bg-[#f97315]\">\n                              <RiBankFill className=\"text-white text-lg\" />\n                            </div>\n                            <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-600 rounded-full flex items-center justify-center border-2 border-white\">\n                              <i className=\"fas fa-check text-white text-xs\"></i>\n                            </div>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-semibold text-gray-900\">{bankInfo?.accountHolder}</p>\n                            <p className=\"text-xs text-green-600 font-medium\">\n                              Koppeling rekening succesvol\n                            </p>\n                            <p className=\"text-xs text-gray-500 font-mono\">\n                              IBAN: {bankInfo?.iban ? `${bankInfo.iban.slice(0, 2)}** **** **** ${bankInfo.iban.slice(-4)}` : ''}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <button\n                          className=\"text-gray-400 hover:text-red-500 transition-colors p-1\"\n                          onClick={() => {\n                            setBankLinked(false);\n                            setBankInfo(null);\n                          }}\n                          data-testid=\"button-unlink-bank\"\n                        >\n                          <i className=\"fas fa-times text-sm\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {splitMode === 'equal' ? (\n          <div className=\"space-y-6 animate-slide-up\">\n            <div className=\"parti-card\">\n              <Label className=\"block parti-heading-3 mb-4 text-left\">2) Kies het aantal deelnemers</Label>\n              <div className=\"flex items-center space-x-6\">\n                <button \n                  className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center touch-target hover:bg-muted/80 transition-colors\"\n                  onClick={() => setParticipantCount(Math.max(2, participantCount - 1))}\n                  data-testid=\"button-decrease-participants\"\n                >\n                  <i className=\"fas fa-minus text-muted-foreground text-sm\"></i>\n                </button>\n                <div className=\"flex-1 text-center\">\n                  <span className=\"parti-amount-large\" data-testid=\"text-participant-count\">{participantCount}</span>\n                  <p className=\"parti-body mt-1\">personen</p>\n                </div>\n                <button \n                  className=\"w-12 h-12 parti-bg-primary rounded-lg flex items-center justify-center touch-target hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed\"\n                  onClick={() => {\n                    const totalAmount = parseFloat(billData.totalAmount);\n                    // Ensure minimum 1 cent per person - prevent 0 euro per person\n                    const maxParticipants = Math.min(20, Math.floor(totalAmount / 0.01));\n                    if (participantCount < maxParticipants) {\n                      setParticipantCount(participantCount + 1);\n                    }\n                  }}\n                  disabled={participantCount >= Math.min(20, Math.floor(parseFloat(billData.totalAmount) / 0.01))}\n                  data-testid=\"button-increase-participants\"\n                >\n                  <i className=\"fas fa-plus text-white text-sm\"></i>\n                </button>\n              </div>\n              <div className=\"flex justify-center mt-6\">\n                <div className=\"bg-muted rounded-lg px-4 py-3\">\n                  <span className=\"text-base font-semibold text-foreground\">\n                    â¬ {(parseFloat(billData.totalAmount) / participantCount).toFixed(2)} per persoon\n                  </span>\n                </div>\n              </div>\n              \n              \n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-6 animate-slide-up\">\n            \n          \n            <div className=\"space-y-4\">\n              <div className=\"parti-card\">\n                <div \n                  className=\"flex items-center justify-between cursor-pointer p-2 -m-2 rounded-lg hover:bg-gray-50 transition-colors\"\n                  onClick={() => setItemsExpanded(!itemsExpanded)}\n                >\n                  <h3 className=\"parti-heading-3 font-normal\">2) Selecteer je items</h3>\n                  <ChevronDown \n                    className={`w-5 h-5 text-gray-500 transition-transform duration-200 ${\n                      itemsExpanded ? 'rotate-180' : ''\n                    }`}\n                  />\n                </div>\n              </div>\n              {itemsExpanded && billData.items.map((item, index) => {\n                const selectedQuantity = selectedItems[index] || 0;\n                const originalQuantity = originalQuantities[index] || 0;\n                const remainingQuantity = originalQuantity - selectedQuantity;\n                const isUnavailable = originalQuantity === 0;\n                \n                return (\n                  <div key={index} className={`monarch-card p-4 transition-all duration-200 ${isUnavailable ? 'opacity-60 bg-gray-50 border-gray-200' : 'hover:shadow-md'} ${selectedQuantity > 0 ? 'ring-2 ring-monarch-primary ring-opacity-20 bg-orange-50' : ''}`}>\n                    {/* Header with item name and selected badge */}\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className={`text-base font-semibold ${isUnavailable ? 'text-gray-500' : 'text-gray-900'}`}>\n                        {item.name}\n                      </h4>\n                    </div>\n                    \n                    {/* Price and availability row */}\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className={`text-lg font-bold ${isUnavailable ? 'text-gray-500' : 'text-monarch-primary'}`}>\n                          â¬{item.price}\n                        </span>\n                        <span className=\"text-sm text-gray-500\">per stuk</span>\n                      </div>\n                      \n                      <div className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${\n                        originalQuantity === 0 \n                          ? 'bg-red-100 text-red-700' \n                          : remainingQuantity === 0\n                          ? 'bg-blue-100 text-blue-700'\n                          : remainingQuantity <= 2 \n                          ? 'bg-orange-100 text-orange-700' \n                          : remainingQuantity <= 5\n                          ? 'bg-yellow-100 text-yellow-700'\n                          : 'bg-green-100 text-green-700'\n                      }`}>\n                        {originalQuantity === 0 ? (\n                          <>\n                            <i className=\"fas fa-times mr-1\"></i>\n                            Onbeschikbaar\n                          </>\n                        ) : remainingQuantity === 0 ? (\n                          <>\n                            <i className=\"fas fa-check-circle mr-1\"></i>\n                            Allemaal geselecteerd\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-check mr-1\"></i>\n                            {remainingQuantity} nog beschikbaar\n                          </>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Quantity controls or unavailable message */}\n                    {!isUnavailable ? (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center bg-gray-50 rounded-xl p-1 border border-gray-200\">\n                          <button \n                            className=\"w-10 h-10 rounded-lg bg-white hover:bg-gray-100 flex items-center justify-center transition-all shadow-sm disabled:opacity-50 disabled:cursor-not-allowed touch-target\"\n                            onClick={() => handleQuantityChange(index, -1)}\n                            disabled={selectedQuantity === 0}\n                            data-testid={`button-decrease-${index}`}\n                          >\n                            <i className=\"fas fa-minus text-gray-600\"></i>\n                          </button>\n                          \n                          <div className=\"w-12 text-center\">\n                            <span className=\"text-lg font-bold text-gray-900\" data-testid={`quantity-${index}`}>\n                              {selectedQuantity}\n                            </span>\n                          </div>\n                          \n                          <button \n                            className=\"w-10 h-10 rounded-lg bg-monarch-primary hover:bg-orange-600 text-white flex items-center justify-center transition-all shadow-sm disabled:opacity-50 disabled:cursor-not-allowed touch-target\"\n                            onClick={() => handleQuantityChange(index, 1)}\n                            disabled={selectedQuantity >= originalQuantity}\n                            data-testid={`button-increase-${index}`}\n                          >\n                            <i className=\"fas fa-plus\"></i>\n                          </button>\n                        </div>\n                        \n                        {selectedQuantity > 0 && (\n                          <div className=\"text-right\">\n                            <div className=\"text-xs text-gray-500 mb-1\">Subtotaal</div>\n                            <div className=\"text-base font-bold text-monarch-primary\">\n                              â¬{(parseFloat(item.price) * selectedQuantity).toFixed(2)}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-4\">\n                        <i className=\"fas fa-ban text-red-400 text-2xl mb-2\"></i>\n                        <p className=\"text-sm text-gray-500\">Dit item is niet meer beschikbaar</p>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"parti-card-elevated\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"parti-heading-3\">Jouw totaal:</span>\n                <span className=\"parti-amount-large parti-text-primary\" data-testid=\"text-selected-total\">\n                  â¬ {calculateSelectedTotal}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"px-4 mt-auto\">\n          <button \n            className=\"w-full parti-button parti-button-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n            onClick={handleContinue}\n            disabled={!bankLinked || !bankInfo || (splitMode === 'items' && Object.values(selectedItems).every(qty => qty === 0))}\n            data-testid=\"button-continue\"\n          >\n            <MdOutlinePayment className=\"text-lg\" />\n            <span>\n              {!bankLinked || !bankInfo\n                ? 'Koppel eerst bankrekening'\n                : (splitMode === 'items' && Object.values(selectedItems).every(qty => qty === 0))\n                  ? 'Kies minstens Ã©Ã©n item'\n                  : 'Verder naar betalen'\n              }\n            </span>\n          </button>\n        </div>\n      </div>\n      {/* BankSelector removed for simpler direct linking */}\n    </div>\n  );\n}\n","size_bytes":21770},"client/src/components/progress-bar.tsx":{"content":"import logoPath from \"@assets/SchermÂ­afbeelding 2025-08-04 om 16.04.58_1754316724210.png\";\n\ninterface ProgressBarProps {\n  currentStep: number;\n  totalSteps: number;\n  onBack?: () => void;\n}\n\nexport default function ProgressBar({ currentStep, totalSteps, onBack }: ProgressBarProps) {\n  const progressPercentage = (currentStep / totalSteps) * 100;\n\n  return (\n    <div className=\"sticky top-0 z-50 bg-white px-3 py-3 border-b border-gray-100\">\n      \n      <div className=\"flex items-center justify-center mb-3\">\n        <img \n          src={logoPath} \n          alt=\"PartiPay Logo\" \n          className=\"h-16 w-auto object-contain max-w-xs filter drop-shadow-none shadow-none border-none bg-transparent\"\n        />\n      </div>\n      \n      {/* Visual Progress Bar */}\n      <div className=\"mb-4\">\n        <div className=\"w-full bg-gray-200 rounded-full h-1.5 mb-1.5\">\n          <div \n            className=\"bg-monarch-primary h-1.5 rounded-full transition-all duration-700 ease-out\"\n            style={{ width: `${progressPercentage}%` }}\n            data-testid=\"visual-progress-bar\"\n          ></div>\n        </div>\n        <div className=\"flex justify-between px-1\">\n          {Array.from({ length: totalSteps }, (_, index) => (\n            <div \n              key={index + 1}\n              className={`w-1.5 h-1.5 rounded-full transition-all duration-300 ${\n                index + 1 <= currentStep \n                  ? 'bg-monarch-primary' \n                  : 'bg-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n      \n      {/* Step indicator and back button */}\n      <div className=\"flex items-center justify-center relative\">\n        {onBack && currentStep > 1 && (\n          <button \n            className=\"w-10 h-10 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center touch-target transition-all duration-200 shadow-sm absolute left-0\"\n            onClick={onBack}\n            data-testid=\"button-back-progress\"\n          >\n            <i className=\"fas fa-arrow-left text-gray-700 text-lg\"></i>\n          </button>\n        )}\n        <p className=\"monarch-section-title\">Stap {currentStep} van {totalSteps}</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2219},"client/src/components/qr-scanner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface QRScannerProps {\n  onScan: () => void;\n  isScanning: boolean;\n  scannedSuccess: boolean;\n}\n\nexport default function QRScanner({ onScan, isScanning, scannedSuccess }: QRScannerProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-20 h-20 bg-gradient-to-r from-[hsl(24,_95%,_53%)] to-[hsl(38,_92%,_50%)] rounded-full flex items-center justify-center mx-auto\">\n          <i className=\"fas fa-qrcode text-2xl text-white\"></i>\n        </div>\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Scan QR-code aan je tafel</h2>\n          <p className=\"text-sm text-gray-600\">Scan de code om je rekening op te halen</p>\n        </div>\n      </div>\n\n      <div className=\"relative\">\n        <div className=\"aspect-square bg-gray-900 rounded-xl overflow-hidden relative\">\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-48 h-48 border-2 border-white rounded-lg relative\">\n              <div className=\"absolute -top-1 -left-1 w-6 h-6 border-l-4 border-t-4 border-[hsl(24,_95%,_53%)] rounded-tl-lg\"></div>\n              <div className=\"absolute -top-1 -right-1 w-6 h-6 border-r-4 border-t-4 border-[hsl(24,_95%,_53%)] rounded-tr-lg\"></div>\n              <div className=\"absolute -bottom-1 -left-1 w-6 h-6 border-l-4 border-b-4 border-[hsl(24,_95%,_53%)] rounded-bl-lg\"></div>\n              <div className=\"absolute -bottom-1 -right-1 w-6 h-6 border-r-4 border-b-4 border-[hsl(24,_95%,_53%)] rounded-br-lg\"></div>\n            </div>\n          </div>\n          {isScanning && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-48 h-0.5 bg-[hsl(24,_95%,_53%)] animate-pulse\"></div>\n            </div>\n          )}\n        </div>\n        <p className=\"text-center text-xs text-gray-500 mt-2\">Plaats de QR-code in het midden van het scherm</p>\n        \n        <div className=\"text-center mt-4\">\n          <Button \n            onClick={onScan}\n            disabled={isScanning}\n            className=\"bg-[hsl(24,_95%,_53%)] hover:bg-[hsl(24,_95%,_48%)]\"\n            data-testid=\"button-scan-qr\"\n          >\n            {isScanning ? 'Scannen...' : 'Demo: Scan QR-code'}\n          </Button>\n        </div>\n      </div>\n\n      {scannedSuccess && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\" data-testid=\"scan-success\">\n          <i className=\"fas fa-check-circle text-green-500 text-2xl mb-2\"></i>\n          <p className=\"text-green-800 font-medium\">QR-code gescand!</p>\n          <p className=\"text-green-600 text-sm\">Restaurant De Blauwe Kater, Tafel 12</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2810},"client/src/components/sharing-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { generateQRCode } from \"@/lib/qr-utils\";\nimport { simulateBankingFlow } from \"@/lib/pdf-utils\";\nimport { MdError } from \"react-icons/md\";\n\ninterface SessionData {\n  session: {\n    id: string;\n    restaurantName: string;\n    tableNumber: string;\n    splitMode: string;\n    totalAmount: string;\n    participantCount: number;\n    isActive: boolean;\n  };\n  participants: Array<{\n    id: string;\n    name: string;\n    hasPaid: boolean;\n    paidAmount: string;\n    expectedAmount: string;\n    isMainBooker: boolean;\n  }>;\n  billItems: Array<{\n    id: string;\n    name: string;\n    price: string;\n    quantity: number;\n  }>;\n  itemClaims: Array<{\n    participantId: string;\n    billItemId: string;\n    quantity: number;\n  }>;\n  payments: Array<{\n    id: string;\n    participantId: string;\n    amount: string;\n    status: string;\n  }>;\n}\n\ninterface SharingDashboardProps {\n  sessionData: SessionData;\n}\n\nexport default function SharingDashboard({ sessionData: initialData }: SharingDashboardProps) {\n  const [sessionData, setSessionData] = useState(initialData);\n  \n  // Sync local state with props when data changes\n  useEffect(() => {\n    setSessionData(initialData);\n    \n    // Check if session is completed - only for 'equal' split mode\n    // For 'items' mode, main booker should stay on dashboard regardless of session status\n    if (initialData.session && !initialData.session.isActive && initialData.session.splitMode === 'equal') {\n      setSessionCompleted(true);\n    }\n  }, [initialData]);\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [sessionCompleted, setSessionCompleted] = useState(false);\n  const [showQRModal, setShowQRModal] = useState(false);\n  const [showPaymentConfirmModal, setShowPaymentConfirmModal] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { connected } = useWebSocket(sessionData.session.id, (message) => {\n    // Force immediate refresh for all real-time updates\n    const forceRefresh = () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', sessionData.session.id] });\n      queryClient.refetchQueries({ queryKey: ['/api/sessions', sessionData.session.id] });\n    };\n\n    if (message.type === 'participant-joined') {\n      forceRefresh();\n      toast({\n        title: \"Nieuwe deelnemer! ð\",\n        description: `${message.participant.name} heeft zich aangesloten`,\n        duration: 4000,\n      });\n    } else if (message.type === 'items-claimed') {\n      forceRefresh();\n      const participant = sessionData.participants.find(p => p.id === message.participantId);\n      if (participant) {\n        toast({\n          title: \"Items geselecteerd ð½ï¸\",\n          description: `${participant.name} heeft items gekozen (â¬${message.expectedAmount.toFixed(2)})`,\n          duration: 4000,\n        });\n      }\n    } else if (message.type === 'participant-payment-completed' || message.type === 'payment-completed' || message.type === 'session-completed') {\n      forceRefresh();\n      \n      if (message.type === 'session-completed') {\n        // Only show completion for 'equal' split mode\n        // For 'items' mode, main booker should stay on dashboard to manually pay full bill\n        if (sessionData.session.splitMode === 'equal') {\n          toast({\n            title: \"Sessie voltooid! ð\",\n            description: \"Alle betalingen zijn ontvangen\",\n            duration: 5000,\n          });\n          setSessionCompleted(true);\n        } else {\n          // For 'items' mode, just show a notification but don't complete the session\n          toast({\n            title: \"Alle deelnemers hebben betaald! ð°\",\n            description: \"Je kunt nu de volledige rekening betalen\",\n            duration: 5000,\n          });\n        }\n      } else {\n        const paidParticipant = message.participant || sessionData.participants.find(p => p.id === message.participantId);\n        if (paidParticipant) {\n          toast({\n            title: \"Betaling ontvangen! ð°\",\n            description: `${paidParticipant.name} heeft â¬${parseFloat(message.payment?.amount || message.amount || '0').toFixed(2)} betaald`,\n            duration: 5000,\n          });\n        }\n      }\n    }\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: async (data: { participantId: string; amount: number }) => {\n      const res = await apiRequest('POST', `/api/sessions/${sessionData.session.id}/pay`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Betaling voltooid\",\n        description: \"Je betaling is succesvol verwerkt!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Betalingsfout\",\n        description: \"Er is iets misgegaan bij de betaling. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const [processingPayment, setProcessingPayment] = useState(false);\n\n  const fullPaymentMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', `/api/sessions/${sessionData.session.id}/initiate-payment`, {});\n      return res.json();\n    },\n    onSuccess: (data) => {\n      // Start banking deeplink flow\n      setProcessingPayment(true);\n      simulateBankingFlow(\n        sessionData.session.totalAmount,\n        sessionData.session.id,\n        () => {\n          setProcessingPayment(false);\n          // Success handled by redirect to payment-success page\n        },\n        (error) => {\n          setProcessingPayment(false);\n          toast({\n            title: \"Betalingsfout\",\n            description: error,\n            variant: \"destructive\",\n          });\n        }\n      );\n    },\n    onError: () => {\n      toast({\n        title: \"Betalingsfout\",\n        description: \"Kon betaling niet starten. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    // Generate QR code for participants to join the session\n    const joinUrl = `${window.location.origin}/join/${sessionData.session.id}`;\n    generateQRCode(joinUrl).then(setQrCodeUrl);\n  }, [sessionData.session.id]);\n\n  const calculateProgress = () => {\n    // For split mode, calculate expected total based on actual participants\n    const totalAmount = parseFloat(sessionData.session.totalAmount);\n    const expectedTotal = sessionData.session.splitMode === 'equal' \n      ? (totalAmount / actualParticipants) * actualParticipants\n      : totalAmount;\n    \n    const totalPaid = sessionData.participants.reduce((sum, p) => {\n      if (p.hasPaid) {\n        // Use the actual expected amount for this participant\n        const participantExpected = parseFloat(p.expectedAmount || '0');\n        return sum + participantExpected;\n      }\n      return sum;\n    }, 0);\n    return expectedTotal > 0 ? (totalPaid / expectedTotal) * 100 : 0;\n  };\n\n  const paidCount = sessionData.participants.filter(p => p.hasPaid).length;\n  const totalCount = sessionData.session.participantCount || sessionData.participants.length;\n  const actualParticipants = sessionData.participants.length;\n  const waitingForParticipants = totalCount - actualParticipants;\n\n  const handleMockPayment = (participant: any) => {\n    // Use the participant's actual expected amount\n    const amount = parseFloat(participant.expectedAmount || '0');\n    if (amount > 0) {\n      paymentMutation.mutate({\n        participantId: participant.id,\n        amount\n      });\n    }\n  };\n\n  const calculateOutstandingDetails = () => {\n    const totalAmount = parseFloat(sessionData.session.totalAmount);\n    \n    if (sessionData.session.splitMode === 'items') {\n      // For items mode, calculate based on unclaimed items\n      const totalItemsValue = sessionData.billItems.reduce((sum, item) => {\n        const claimedQuantity = sessionData.itemClaims\n          .filter(claim => claim.billItemId === item.id)\n          .reduce((claimSum, claim) => claimSum + claim.quantity, 0);\n        const unclaimedQuantity = item.quantity - claimedQuantity;\n        return sum + (parseFloat(item.price) * unclaimedQuantity);\n      }, 0);\n      \n      const unpaidParticipants = sessionData.participants.filter(p => !p.hasPaid);\n      \n      return {\n        outstandingAmount: totalItemsValue,\n        unpaidParticipants,\n        hasOutstanding: totalItemsValue > 0.01 // Small threshold for floating point precision\n      };\n    } else {\n      // For equal mode, calculate based on participant expected amounts\n      const totalPaid = sessionData.participants.reduce((sum, p) => {\n        if (p.hasPaid) {\n          const participantExpected = parseFloat(p.expectedAmount || '0');\n          return sum + participantExpected;\n        }\n        return sum;\n      }, 0);\n      \n      const outstandingAmount = totalAmount - totalPaid;\n      const unpaidParticipants = sessionData.participants.filter(p => !p.hasPaid);\n      \n      return {\n        outstandingAmount,\n        unpaidParticipants,\n        hasOutstanding: outstandingAmount > 0.01\n      };\n    }\n  };\n\n  const calculateUnpaidItems = () => {\n    if (sessionData.session.splitMode !== 'items') return [];\n    \n    return sessionData.billItems.map(item => {\n      const totalClaimed = sessionData.itemClaims\n        .filter(claim => claim.billItemId === item.id)\n        .reduce((sum, claim) => sum + claim.quantity, 0);\n      \n      const unclaimed = item.quantity - totalClaimed;\n      \n      return {\n        ...item,\n        unclaimed,\n        hasUnclaimed: unclaimed > 0\n      };\n    }).filter(item => item.hasUnclaimed);\n  };\n\n  const handlePayFullBill = () => {\n    const outstandingDetails = calculateOutstandingDetails();\n    \n    // If there are outstanding amounts, show confirmation modal\n    if (outstandingDetails.hasOutstanding) {\n      setShowPaymentConfirmModal(true);\n    } else {\n      // If everyone has paid, proceed directly\n      fullPaymentMutation.mutate();\n    }\n  };\n\n  const confirmFullPayment = () => {\n    setShowPaymentConfirmModal(false);\n    fullPaymentMutation.mutate();\n  };\n\n  const isMainBooker = sessionData.participants.some(p => p.isMainBooker);\n  const canPayFullBill = true; // Allow anyone to pay the full bill\n  const outstandingDetails = calculateOutstandingDetails();\n\n  const handleShareQR = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: 'PartiPay - Doe mee!',\n          text: `Scan deze QR-code om mee te betalen voor ${sessionData.session.restaurantName}`,\n          url: `${window.location.origin}/session/${sessionData.session.id}`\n        });\n      } catch (err) {\n        console.log('Share cancelled');\n      }\n    } else {\n      // Fallback: copy to clipboard\n      await navigator.clipboard.writeText(`${window.location.origin}/session/${sessionData.session.id}`);\n      toast({\n        title: \"Link gekopieerd\",\n        description: \"De sessielink is naar je klembord gekopieerd\",\n      });\n    }\n  };\n\n  if (sessionCompleted) {\n    return (\n      <div className=\"px-4 py-6\">\n        <div className=\"monarch-widget text-center\" data-testid=\"success-state\">\n          <div className=\"w-20 h-20 bg-monarch-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n            <i className=\"fas fa-check text-white text-2xl\"></i>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Alle betalingen voltooid!</h3>\n          <p className=\"monarch-body mb-8\">Bedankt voor het gebruik van PartiPay</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"monarch-container bg-background flex flex-col\">\n      <div className=\"flex-1 px-3 py-4 space-y-4\">\n      \n      \n      <div className=\"monarch-widget text-center animate-slide-up\">\n        <h1 className=\"monarch-title mb-2\">{sessionData.session.splitMode === 'equal' ? 'Split the Bill' : 'Pay your Part'}</h1>\n        <p className=\"monarch-body mb-3\">Sessie: <span className=\"font-mono monarch-caption bg-muted px-2 py-0.5 rounded-full text-xs\">{sessionData.session.id.slice(0, 8).toUpperCase()}</span></p>\n        <p className=\"monarch-body mb-4\">Laat anderen deze QR-code scannen om mee te betalen</p>\n        <button \n          className=\"monarch-btn monarch-btn-primary touch-target\"\n          onClick={() => setShowQRModal(true)}\n          data-testid=\"button-share-qr\"\n        >\n          Deel QR-code\n        </button>\n      </div>\n\n      <div className=\"space-y-3\">\n        {/* Payment Progress Bar */}\n        {(() => {\n          const totalAmount = parseFloat(sessionData.session.totalAmount);\n          const totalPaid = sessionData.participants.reduce((sum, p) => {\n            if (p.hasPaid) {\n              // Use the participant's actual expected amount\n              const participantExpected = parseFloat(p.expectedAmount || '0');\n              return sum + participantExpected;\n            }\n            return sum;\n          }, 0);\n          const progressPercentage = totalAmount > 0 ? (totalPaid / totalAmount) * 100 : 0;\n          \n          return (\n            <div className=\"monarch-card mb-3\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-xs font-medium text-gray-700\">Betalingsvoortgang</span>\n                <span className=\"text-xs font-medium text-gray-900\">\n                  Deelnemers ({actualParticipants}/{totalCount})\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                <div \n                  className=\"bg-green-400 h-2 rounded-full transition-all duration-700 ease-out\"\n                  style={{ width: `${Math.min(progressPercentage, 100)}%` }}\n                  data-testid=\"payment-progress-bar\"\n                />\n              </div>\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>{Math.round(progressPercentage)}% betaald</span>\n                <span>Nog â¬ {calculateOutstandingDetails().outstandingAmount.toFixed(2)} te gaan</span>\n              </div>\n            </div>\n          );\n        })()}\n        \n        \n        {sessionData.participants.map((participant, index) => (\n          <div key={participant.id} className={`monarch-card flex items-center justify-between animate-slide-up ${participant.isMainBooker ? 'bg-orange-50/50' : ''}`} style={{animationDelay: `${index * 0.02}s`}}>\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${participant.isMainBooker ? 'bg-monarch-primary' : ''}`} style={participant.isMainBooker ? {} : { backgroundColor: '#f9731691' }}>\n                <span className=\"text-white font-semibold text-xs\">\n                  {participant.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </span>\n              </div>\n              <div>\n                <p className=\"text-sm font-semibold text-gray-900 mb-1\">\n                  {participant.name}\n                  {participant.isMainBooker && <span className=\"monarch-caption ml-1 text-muted-foreground text-xs\">â¢ Hoofdboeker</span>}\n                </p>\n                <p className=\"text-sm text-gray-900 leading-tight font-semibold tabular-nums\">\n                  â¬ {parseFloat(participant.expectedAmount || '0').toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {participant.hasPaid ? (\n                <>\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm text-gray-900 leading-tight font-semibold text-green-600\">Betaald</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\n                  <span className=\"monarch-body font-medium text-yellow-600 text-xs\">Wachtend</span>\n                </>\n              )}\n            </div>\n          </div>\n        ))}\n        \n        \n        \n        {/* Show waiting slots for remaining participants */}\n        {waitingForParticipants > 0 && Array.from({ length: waitingForParticipants }, (_, index) => (\n          <div key={`waiting-${index}`} className=\"monarch-card flex items-center justify-between animate-slide-up opacity-50\" style={{animationDelay: `${(sessionData.participants.length + index) * 0.1}s`}}>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-user text-gray-500 text-sm\"></i>\n              </div>\n              <div>\n                <p className=\"text-sm font-semibold text-gray-500 mb-1\">\n                  Wachtend op deelnemer...\n                </p>\n                <p className=\"text-sm text-gray-500 leading-tight font-semibold tabular-nums\">\n                  â¬ {sessionData.session.splitMode === 'equal' \n                    ? (parseFloat(sessionData.session.totalAmount) / actualParticipants).toFixed(2)\n                    : '0.00'\n                  }\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\n              <span className=\"monarch-body font-medium text-gray-500 text-xs\">Wachtend</span>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Bottom Payment Button */}\n      {canPayFullBill && (\n        <div className=\"px-4 pb-4 mt-4\">\n          <button\n            className=\"w-full monarch-btn monarch-btn-primary flex items-center justify-center space-x-2\"\n            onClick={handlePayFullBill}\n            disabled={fullPaymentMutation.isPending || processingPayment}\n            data-testid=\"button-pay-full-bill\"\n          >\n            {fullPaymentMutation.isPending || processingPayment ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin\"></i>\n                <span>{processingPayment ? 'Banking app openen...' : 'Betaling voorbereiden...'}</span>\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-credit-card\"></i>\n                <span>Betaal volledige rekening</span>\n              </>\n            )}\n          </button>\n        </div>\n      )}\n      </div>\n      \n      {/* QR Code Modal */}\n      {showQRModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-3\">\n          <div className=\"bg-white rounded-xl p-4 max-w-sm w-full text-center animate-slide-up\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-base font-semibold text-gray-900\">Scan QR-code</h3>\n              <button \n                onClick={() => setShowQRModal(false)}\n                className=\"w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center\"\n                data-testid=\"button-close-qr\"\n              >\n                <i className=\"fas fa-times text-gray-700\"></i>\n              </button>\n            </div>\n            {qrCodeUrl ? (\n              <img \n                src={qrCodeUrl} \n                alt=\"QR Code\" \n                className=\"w-48 h-48 mx-auto mb-4 rounded-xl border\"\n                data-testid=\"qr-code-modal\"\n              />\n            ) : (\n              <div className=\"w-48 h-48 bg-muted rounded-xl mx-auto mb-4 flex items-center justify-center\">\n                <div className=\"monarch-body text-xs\">QR-code laden...</div>\n              </div>\n            )}\n            <p className=\"monarch-body mb-4 text-xs\">Laat vrienden deze code scannen om mee te betalen</p>\n            <button \n              className=\"monarch-btn monarch-btn-secondary touch-target w-full\"\n              onClick={handleShareQR}\n              data-testid=\"button-share-link\"\n            >\n              Deel link\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Payment Confirmation Modal */}\n      {showPaymentConfirmModal && (() => {\n        const outstandingDetails = calculateOutstandingDetails();\n        const unpaidItems = calculateUnpaidItems();\n        return (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-3\">\n            <div className=\"bg-white rounded-xl p-4 max-w-sm w-full animate-slide-up\">\n              <div className=\"flex items-start space-x-2 mb-3\">\n                <MdError className=\"w-24 h-24 text-orange-500 mt-0.5\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Bevestig volledige betaling</h3>\n                  <p className=\"text-xs text-gray-600 mb-3\">\n                    {sessionData.session.splitMode === 'items' \n                      ? 'Er zijn nog items die niet zijn geselecteerd. Wil je toch de volledige rekening betalen?'\n                      : 'Niet alle deelnemers hebben hun deel betaald. Wil je toch de volledige rekening betalen?'\n                    }\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n                <h4 className=\"text-xs font-medium text-red-800 mb-1\">Openstaand bedrag</h4>\n                <p className=\"text-base font-bold text-red-900 mb-2\">\n                  â¬ {outstandingDetails.outstandingAmount.toFixed(2)}\n                </p>\n                \n                {sessionData.session.splitMode === 'items' && unpaidItems.length > 0 && (\n                  <div className=\"mt-3\">\n                    <p className=\"text-xs text-red-700 mb-2\">Niet geselecteerde items:</p>\n                    <ul className=\"text-xs text-red-700 space-y-1\">\n                      {unpaidItems.map(item => (\n                        <li key={item.id} className=\"flex justify-between items-center\">\n                          <span>â¢ {item.name}</span>\n                          <span className=\"font-semibold\">\n                            {item.unclaimed}x â¬ {parseFloat(item.price).toFixed(2)}\n                          </span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <button\n                  className=\"flex-1 monarch-btn monarch-btn-secondary text-xs\"\n                  onClick={() => setShowPaymentConfirmModal(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Annuleren\n                </button>\n                <button\n                  className=\"flex-1 monarch-btn monarch-btn-primary text-xs\"\n                  onClick={confirmFullPayment}\n                  disabled={fullPaymentMutation.isPending || processingPayment}\n                  data-testid=\"button-confirm-payment\"\n                >\n                  {fullPaymentMutation.isPending || processingPayment ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-1 text-xs\"></i>\n                      {processingPayment ? 'Banking app...' : 'Voorbereiden...'}\n                    </>\n                  ) : (\n                    'Ja, betaal alles'\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      })()}\n    </div>\n  );\n}\n","size_bytes":23793},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\nexport function useWebSocket(sessionId: string, onMessage: (message: any) => void) {\n  const [connected, setConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setConnected(true);\n      \n      // Join the session\n      ws.send(JSON.stringify({\n        type: 'join-session',\n        sessionId\n      }));\n\n      // Clear any pending reconnect\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        onMessage(message);\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setConnected(false);\n      \n      // Immediate reconnect for super fast experience\n      reconnectTimeoutRef.current = setTimeout(() => {\n        connect();\n      }, 100);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnected(false);\n    };\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [sessionId]);\n\n  return { connected };\n}\n","size_bytes":1838},"client/src/lib/qr-utils.ts":{"content":"export async function generateQRCode(text: string): Promise<string> {\n  // Using qr-server.com API for QR code generation - larger size for better scanning\n  const size = 400;\n  const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(text)}&bgcolor=FFFFFF&color=000000&qzone=2&margin=20&format=png&ecc=M`;\n  \n  return qrUrl;\n}\n\nexport function parseQRCode(data: string): { tableNumber: string; restaurantName: string } | null {\n  try {\n    // In a real implementation, this would parse the actual QR code format\n    // For demo purposes, we'll extract from URL or use mock data\n    return {\n      tableNumber: \"7\",\n      restaurantName: \"De Gouden Leeuw\"\n    };\n  } catch (error) {\n    console.error('QR parse error:', error);\n    return null;\n  }\n}\n","size_bytes":800},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 0, // Always fresh data for real-time experience\n      gcTime: 2 * 60 * 1000, // 2 minutes garbage collection for speed\n      retry: 2, // Quick retries for reliability\n      retryDelay: (attemptIndex) => Math.min(100 * 2 ** attemptIndex, 500), // Exponential backoff starting at 100ms\n      networkMode: 'online',\n    },\n    mutations: {\n      retry: 2,\n      retryDelay: 100, // Super fast retry for mutations\n      networkMode: 'online',\n    },\n  },\n});\n","size_bytes":1750},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { IoReceiptOutline } from \"react-icons/io5\";\nimport { MdCallSplit } from \"react-icons/md\";\nimport { BiSelectMultiple } from \"react-icons/bi\";\nimport ProgressBar from \"@/components/progress-bar\";\nimport BillDisplay from \"@/components/bill-display\";\nimport ModeSetup from \"@/components/mode-setup\";\nimport { Button } from \"@/components/ui/button\";\nimport type { BillItem } from \"@shared/schema\";\n\ninterface BillData {\n  items: BillItem[];\n  totalAmount: string;\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [billData, setBillData] = useState<BillData | null>(null);\n  const [billExpanded, setBillExpanded] = useState(false);\n  const [splitMode, setSplitMode] = useState<'equal' | 'items' | null>(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  const loadBillMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/scan-qr', {\n        tableNumber: \"12\",\n        restaurantName: \"De Blauwe Kater\"\n      });\n      return res.json();\n    },\n    onSuccess: (data: BillData) => {\n      setBillData(data);\n      setDataLoaded(true);\n    },\n    onError: () => {\n      toast({\n        title: \"Fout\",\n        description: \"Kon rekening niet ophalen. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: async (sessionData: any) => {\n      console.log('Creating session with data:', sessionData);\n      console.log('Environment check:', {\n        isDev: import.meta.env.DEV,\n        baseURL: import.meta.env.BASE_URL,\n        currentURL: window.location.href,\n        timestamp: new Date().toISOString()\n      });\n      \n      try {\n        // Use apiRequest but with additional error handling for production\n        const res = await apiRequest('POST', '/api/sessions', sessionData);\n        const result = await res.json();\n        console.log('Session created successfully:', result);\n        return result;\n      } catch (error) {\n        console.error('Session creation error in mutationFn:', error);\n        \n        // In production, try multiple fallback methods\n        if (!import.meta.env.DEV) {\n          console.log('ð Server 502 error detected, trying production fallbacks...');\n          console.log('ð¡ This is normal for serverless deployments that need to wake up');\n          \n          // First try: Direct fetch with relative URL (retry after 502)\n          try {\n            console.log('â³ Fallback 1: Retrying after server wake-up delay...');\n            // Add delay for serverless cold start\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            \n            const directRes = await fetch('/api/sessions', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(sessionData),\n              credentials: 'include'\n            });\n            \n            if (directRes.ok) {\n              const result = await directRes.json();\n              console.log('â Direct fetch succeeded after retry:', result);\n              return result;\n            }\n            console.log(`â Direct fetch still failed: ${directRes.status}`);\n          } catch (e) {\n            console.log('Direct fetch (relative) error:', e);\n          }\n          \n          // Second try: Absolute URL with longer delay\n          try {\n            console.log('â³ Fallback 2: Longer delay + absolute URL...');\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            \n            const absoluteUrl = `${window.location.origin}/api/sessions`;\n            console.log('ð Trying absolute URL:', absoluteUrl);\n            \n            const absoluteRes = await fetch(absoluteUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(sessionData),\n              credentials: 'include'\n            });\n            \n            if (absoluteRes.ok) {\n              const result = await absoluteRes.json();\n              console.log('â Absolute URL fetch succeeded:', result);\n              return result;\n            }\n            console.log(`â Absolute URL also failed: ${absoluteRes.status}`);\n            const errorText = await absoluteRes.text();\n            throw new Error(`ð« Server still not responding: ${absoluteRes.status} ${errorText}`);\n          } catch (absoluteError) {\n            console.error('All production fallbacks failed:', absoluteError);\n            throw absoluteError;\n          }\n        }\n        throw error;\n      }\n    },\n    onSuccess: (session) => {\n      console.log('Session mutation success, navigating to:', `/session/${session.id}`);\n      \n      // Prefetch session data for instant loading\n      queryClient.prefetchQuery({\n        queryKey: ['/api/sessions', session.id],\n        staleTime: 5 * 60 * 1000,\n      });\n      \n      // Force navigation to session page with multiple fallbacks\n      setCurrentStep(3);\n      \n      // Primary navigation attempt\n      try {\n        setLocation(`/session/${session.id}`);\n      } catch (error) {\n        console.error('Navigation error, trying fallback:', error);\n        // Fallback using window.location\n        window.location.href = `/session/${session.id}`;\n      }\n      \n      // Backup navigation after a short delay\n      setTimeout(() => {\n        if (window.location.pathname !== `/session/${session.id}`) {\n          console.log('Fallback navigation triggered');\n          window.location.href = `/session/${session.id}`;\n        }\n      }, 2000);\n      \n      toast({\n        title: \"Sessie aangemaakt!\",\n        description: \"Je wordt doorgestuurd naar de betaalpagina.\",\n      });\n    },\n    onError: (error) => {\n      console.error('Session creation error:', error);\n      \n      // Show more detailed error in production\n      const errorMessage = error instanceof Error ? error.message : 'Onbekende fout';\n      const isProduction = !import.meta.env.DEV;\n      \n      toast({\n        title: \"Fout bij sessie aanmaken\",\n        description: isProduction \n          ? `Productie fout: ${errorMessage}. Controleer je internetverbinding.`\n          : \"Kon sessie niet aanmaken. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-load bill data when component mounts (simulating QR scan at table)\n  useEffect(() => {\n    if (!dataLoaded && !loadBillMutation.isPending) {\n      loadBillMutation.mutate();\n    }\n  }, [dataLoaded, loadBillMutation]);\n\n  const handleModeSelect = (mode: 'equal' | 'items') => {\n    setSplitMode(mode);\n    setCurrentStep(2);\n  };\n\n  const handleContinueToSharing = (userData: { name: string; bankAccount?: string; participantCount?: number; selectedItems?: any[] }) => {\n    console.log('handleContinueToSharing called with userData:', userData);\n    \n    if (!billData || !splitMode) {\n      console.error('Cannot continue: billData =', billData, 'splitMode =', splitMode);\n      toast({\n        title: \"Fout\",\n        description: \"Rekening of split mode ontbreekt. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log('Starting session creation process...');\n    console.log('createSessionMutation.isPending:', createSessionMutation.isPending);\n    \n    const sessionData = {\n      restaurantName: \"De Blauwe Kater\",\n      tableNumber: \"12\",\n      splitMode,\n      totalAmount: billData.totalAmount,\n      isActive: true,\n    };\n\n    const fullSessionData = {\n      ...sessionData,\n      userData,\n      billItems: billData.items\n    };\n\n    console.log('Calling createSessionMutation with:', fullSessionData);\n    createSessionMutation.mutate(fullSessionData);\n    console.log('createSessionMutation.mutate called');\n  };\n\n  return (\n    <div className=\"monarch-container flex flex-col\">\n      <ProgressBar \n        currentStep={currentStep} \n        totalSteps={3} \n        onBack={currentStep > 1 ? () => setCurrentStep(currentStep - 1) : undefined}\n      />\n      {currentStep === 1 && (\n        <div className=\"flex-1 flex items-center justify-center min-h-0 px-3 animate-fade-in\">\n          <div className=\"w-full max-w-md space-y-6 py-4\">\n          {loadBillMutation.isPending && (\n            <div className=\"text-center space-y-3 py-6\">\n              <div className=\"w-6 h-6 border-2 border-gray-300 border-t-transparent rounded-full animate-spin mx-auto\"></div>\n              <div>\n                <h2 className=\"monarch-title text-base\">Rekening ophalen...</h2>\n              </div>\n            </div>\n          )}\n          \n          {billData && dataLoaded && (\n            <div className=\"text-center space-y-4 animate-slide-up px-2\">\n              <BillDisplay \n                billData={billData}\n                expanded={billExpanded}\n                onToggleExpand={() => setBillExpanded(!billExpanded)}\n              />\n              \n              <div className=\"space-y-3 mt-auto\">\n                <button \n                  className=\"w-full monarch-btn monarch-btn-primary touch-target flex items-center justify-center space-x-2\"\n                  onClick={() => handleModeSelect('equal')}\n                  data-testid=\"button-split-bill\"\n                >\n                  <MdCallSplit className=\"text-lg\" />\n                  <span className=\"text-sm\">Split the Bill</span>\n                </button>\n                \n                <button \n                  className=\"w-full monarch-btn monarch-btn-secondary touch-target flex items-center justify-center space-x-2\"\n                  onClick={() => handleModeSelect('items')}\n                  data-testid=\"button-pay-part\"\n                >\n                  <BiSelectMultiple className=\"text-lg\" />\n                  <span className=\"text-sm\">Pay your Part</span>\n                </button>\n              </div>\n            </div>\n          )}\n          </div>\n        </div>\n      )}\n      {currentStep === 2 && billData && splitMode && (\n        <ModeSetup\n          splitMode={splitMode}\n          billData={billData}\n          onBack={() => setCurrentStep(1)}\n          onContinue={handleContinueToSharing}\n        />\n      )}\n      \n      {currentStep === 3 && createSessionMutation.isPending && (\n        <div className=\"flex-1 flex items-center justify-center min-h-0 px-3 animate-fade-in\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-12 h-12 border-4 parti-bg-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            <h2 className=\"parti-heading-2\">Sessie wordt aangemaakt...</h2>\n            <p className=\"parti-body\">Je wordt doorgestuurd naar de betaalpagina.</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11175},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/session.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport SharingDashboard from \"@/components/sharing-dashboard\";\nimport ProgressBar from \"@/components/progress-bar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function Session() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n\n  const handleBack = () => {\n    navigate('/');\n  };\n\n\n\n  const { data: sessionData, isLoading, error } = useQuery({\n    queryKey: ['/api/sessions', id],\n    enabled: !!id,\n    staleTime: 0, // Always fresh for real-time experience\n    refetchInterval: false, // WebSocket handles updates\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n  });\n\n  // WebSocket for real-time session updates at page level\n  const { connected } = useWebSocket(id || '', (message) => {\n    // Instant cache update without network request\n    queryClient.setQueryData(['/api/sessions', id], (old: any) => {\n      if (!old) return old;\n      // Apply message updates directly to cache for instant UI updates\n      return { ...old, ...message, lastUpdated: Date.now() };\n    });\n    // Still invalidate for consistency but with lower priority\n    setTimeout(() => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', id] });\n    }, 50);\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"parti-container bg-background flex flex-col\">\n        <ProgressBar currentStep={3} totalSteps={3} onBack={handleBack} />\n        <div className=\"flex items-center justify-center min-h-[50vh]\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-12 h-12 border-4 parti-bg-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            <p className=\"parti-body\">Sessie laden...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !sessionData) {\n    return (\n      <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n        <div className=\"parti-card w-full max-w-md mx-4\">\n          <div className=\"flex mb-4 gap-2 items-center\">\n            <AlertCircle className=\"h-8 w-8 text-destructive\" />\n            <h1 className=\"parti-heading-2\">Sessie niet gevonden</h1>\n          </div>\n          <p className=\"mt-4 parti-body\">\n            De sessie kon niet worden geladen. Controleer de link en probeer opnieuw.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"parti-container bg-background flex flex-col\">\n      <ProgressBar currentStep={3} totalSteps={3} onBack={handleBack} />\n      <SharingDashboard sessionData={sessionData as any} />\n    </div>\n  );\n}\n","size_bytes":2821},"client/src/pages/table-qr.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { generateQRCode } from \"@/lib/qr-utils\";\n\nexport default function TableQR() {\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [tableNumber, setTableNumber] = useState(\"12\");\n  const [restaurantName, setRestaurantName] = useState(\"De Blauwe Kater\");\n\n  useEffect(() => {\n    // Generate QR code that points to the app homepage\n    const appUrl = window.location.origin;\n    generateQRCode(appUrl).then(setQrCodeUrl);\n  }, []);\n\n  const handleRegenerateQR = () => {\n    const appUrl = window.location.origin;\n    generateQRCode(appUrl).then(setQrCodeUrl);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col items-center justify-center p-8\">\n      <div className=\"max-w-md w-full text-center space-y-8\">\n        {/* Header */}\n        <div className=\"space-y-4\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Tafel QR-code</h1>\n          <p className=\"text-gray-600\">\n            Scan deze QR-code om je rekening te splitten met PartiPay\n          </p>\n        </div>\n\n        {/* Restaurant Info */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-200\">\n          <div className=\"space-y-4 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Restaurant naam\n              </label>\n              <input\n                type=\"text\"\n                value={restaurantName}\n                onChange={(e) => setRestaurantName(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-monarch-primary focus:border-transparent\"\n                data-testid=\"input-restaurant-name\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tafel nummer\n              </label>\n              <input\n                type=\"text\"\n                value={tableNumber}\n                onChange={(e) => setTableNumber(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-monarch-primary focus:border-transparent\"\n                data-testid=\"input-table-number\"\n              />\n            </div>\n          </div>\n\n          {/* QR Code Display */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-gray-50 rounded-xl p-8 border-2 border-dashed border-gray-300\">\n              {qrCodeUrl ? (\n                <img \n                  src={qrCodeUrl} \n                  alt=\"Tafel QR Code\" \n                  className=\"w-48 h-48 mx-auto\"\n                  data-testid=\"table-qr-code\"\n                />\n              ) : (\n                <div className=\"w-48 h-48 bg-gray-200 rounded-lg mx-auto flex items-center justify-center\">\n                  <div className=\"text-gray-500\">QR-code laden...</div>\n                </div>\n              )}\n            </div>\n\n            {/* Table Info on QR */}\n            <div className=\"text-center space-y-2\">\n              <h2 className=\"text-xl font-bold text-gray-900\">{restaurantName}</h2>\n              <p className=\"text-lg font-semibold text-monarch-primary\">Tafel {tableNumber}</p>\n              <p className=\"text-sm text-gray-600\">\n                Scan om je rekening te splitten\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-4\">\n          <button\n            onClick={handleRegenerateQR}\n            className=\"w-full monarch-btn monarch-btn-secondary py-3\"\n            data-testid=\"button-regenerate-qr\"\n          >\n            QR-code vernieuwen\n          </button>\n          \n          <button\n            onClick={handlePrint}\n            className=\"w-full monarch-btn monarch-btn-primary py-3\"\n            data-testid=\"button-print-qr\"\n          >\n            Print QR-code\n          </button>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"bg-orange-50 rounded-xl p-4 border border-orange-200\">\n          <div className=\"flex items-start space-x-3\">\n            <i className=\"fas fa-info-circle text-orange-600 mt-1\"></i>\n            <div className=\"text-left\">\n              <h3 className=\"font-semibold text-orange-800 mb-2\">Instructies:</h3>\n              <ul className=\"text-sm text-orange-700 space-y-1\">\n                <li>â¢ Print deze QR-code en plaats op de tafel</li>\n                <li>â¢ Klanten scannen de code met hun telefoon</li>\n                <li>â¢ Ze worden naar PartiPay geleid om rekeningen te splitten</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Print Styles */}\n      <style jsx>{`\n        @media print {\n          body * {\n            visibility: hidden;\n          }\n          \n          .print-area, .print-area * {\n            visibility: visible;\n          }\n          \n          .print-area {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            text-align: center;\n            padding: 20px;\n          }\n          \n          @page {\n            margin: 0.5in;\n            size: A4;\n          }\n        }\n      `}</style>\n\n      {/* Hidden print area */}\n      <div className=\"print-area hidden print:block fixed inset-0 bg-white\">\n        <div className=\"text-center space-y-6 pt-20\">\n          <h1 className=\"text-4xl font-bold text-gray-900\">{restaurantName}</h1>\n          <h2 className=\"text-2xl font-semibold text-monarch-primary\">Tafel {tableNumber}</h2>\n          \n          {qrCodeUrl && (\n            <div className=\"flex justify-center\">\n              <img \n                src={qrCodeUrl} \n                alt=\"Tafel QR Code\" \n                className=\"w-64 h-64\"\n              />\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            <p className=\"text-xl font-medium text-gray-800\">\n              Scan om je rekening te splitten\n            </p>\n            <p className=\"text-lg text-gray-600\">\n              Met PartiPay deel je eenvoudig je restaurantrekening\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6285},"client/src/pages/tink-callback.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\nexport default function TinkCallback() {\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      try {\n        const urlParams = new URLSearchParams(window.location.search);\n        const bankLinked = urlParams.get('bank_linked');\n        const data = urlParams.get('data');\n        const error = urlParams.get('error');\n\n        // Validate OAuth state if available\n        const urlState = urlParams.get('state');\n        const storedState = sessionStorage.getItem('tink_oauth_state');\n        \n        if (urlState && storedState && urlState !== storedState) {\n          console.error('OAuth state mismatch - possible CSRF attack');\n          navigate('/?bank_linked=error&error=invalid_state');\n          return;\n        }\n        \n        // Clean up stored state\n        if (storedState) {\n          sessionStorage.removeItem('tink_oauth_state');\n        }\n\n        if (bankLinked === 'success' && data) {\n          const bankInfo = JSON.parse(decodeURIComponent(data));\n          \n          // Validate required fields\n          if (!bankInfo.iban || !bankInfo.accountHolder) {\n            console.error('Invalid bank info received');\n            navigate('/?bank_linked=error&error=invalid_data');\n            return;\n          }\n          \n          // Store bank info in sessionStorage for the main app to pick up\n          sessionStorage.setItem('partipay_bank_info', JSON.stringify({\n            iban: bankInfo.iban,\n            accountHolder: bankInfo.accountHolder\n          }));\n          \n          console.log('Bank account successfully linked');\n          \n          // Navigate back to home with success message\n          navigate('/?bank_linked=success');\n        } else {\n          // Handle error cases\n          console.error('Bank linking failed:', error || 'Unknown error');\n          navigate(`/?bank_linked=error${error ? `&error=${error}` : ''}`);\n        }\n      } catch (error) {\n        console.error('Callback handling error:', error);\n        navigate('/?bank_linked=error&error=callback_error');\n      }\n    };\n\n    // Small delay to ensure URL is fully loaded\n    const timer = setTimeout(handleCallback, 100);\n    return () => clearTimeout(timer);\n  }, [navigate]);\n\n  return (\n    <div className=\"parti-container bg-background flex flex-col items-center justify-center min-h-screen\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-16 h-16 parti-gradient rounded-full flex items-center justify-center mx-auto parti-shadow animate-spin\">\n          <i className=\"fas fa-sync text-white text-2xl\"></i>\n        </div>\n        <h2 className=\"text-2xl font-bold text-foreground\">Bankkoppeling bezig...</h2>\n        <p className=\"text-base text-muted-foreground\">Even geduld, we koppelen je rekening.</p>\n      </div>\n    </div>\n  );\n}","size_bytes":2913},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  // Toast notifications disabled\n  return null\n}\n","size_bytes":255},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/pdf-utils.ts":{"content":"// PDF generation utilities for receipts\nexport async function generateReceiptPDF(sessionData: any, type: 'full' | 'personal', participantId?: string) {\n  const { session, participants, billItems, itemClaims } = sessionData;\n  const mainBooker = participants.find((p: any) => p.isMainBooker);\n  // For personal receipts, use specified participant or default to main booker\n  const targetParticipant = participantId ? participants.find((p: any) => p.id === participantId) : mainBooker;\n  \n  // Create PDF content as HTML string\n  const today = new Date();\n  const receiptNumber = `${today.getDate().toString().padStart(2, '0')}${(today.getMonth() + 1).toString().padStart(2, '0')}${today.getFullYear().toString().slice(-2)}001`;\n  \n  let pdfContent = `\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>${type === 'full' ? 'Volledige' : 'Persoonlijke'} Rekening - ${session.restaurantName}</title>\n        <style>\n          body {\n            font-family: 'Courier New', monospace;\n            font-size: 12px;\n            line-height: 1.4;\n            margin: 20px;\n            color: #000;\n          }\n          .header {\n            text-align: center;\n            border-bottom: 2px solid #000;\n            padding-bottom: 10px;\n            margin-bottom: 15px;\n          }\n          .header h1 {\n            font-size: 18px;\n            font-weight: bold;\n            margin: 0 0 5px 0;\n          }\n          .header p {\n            margin: 2px 0;\n            font-size: 11px;\n          }\n          .receipt-info {\n            text-align: center;\n            border-top: 1px solid #666;\n            border-bottom: 1px solid #666;\n            padding: 8px 0;\n            margin: 10px 0;\n          }\n          .items-header {\n            border-bottom: 1px solid #666;\n            padding-bottom: 3px;\n            margin-bottom: 8px;\n            display: grid;\n            grid-template-columns: 2fr 1fr 1fr 1fr;\n            gap: 8px;\n            font-weight: bold;\n            font-size: 11px;\n          }\n          .item-row {\n            display: grid;\n            grid-template-columns: 2fr 1fr 1fr 1fr;\n            gap: 8px;\n            margin-bottom: 3px;\n            font-size: 11px;\n          }\n          .item-details {\n            font-size: 10px;\n            color: #666;\n            margin-left: 5px;\n            margin-bottom: 8px;\n          }\n          .totals {\n            border-top: 2px solid #000;\n            padding-top: 8px;\n            margin-top: 15px;\n          }\n          .total-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 3px;\n            font-size: 11px;\n          }\n          .total-final {\n            font-weight: bold;\n            font-size: 12px;\n            border-top: 1px solid #666;\n            padding-top: 3px;\n            margin-top: 5px;\n          }\n          .payment-info {\n            margin-top: 15px;\n            padding-top: 8px;\n            border-top: 1px solid #666;\n            font-size: 10px;\n            color: #666;\n          }\n          .footer {\n            text-align: center;\n            font-size: 10px;\n            color: #666;\n            margin-top: 20px;\n            padding-top: 15px;\n            border-top: 1px solid #666;\n          }\n          .personal-note {\n            background-color: #f0f8ff;\n            border: 1px solid #007acc;\n            padding: 10px;\n            margin: 15px 0;\n            border-radius: 5px;\n            font-size: 11px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>DE BLAUWE KATER</h1>\n          <p>Grote Markt 8, 9000 Gent</p>\n          <p>Tel: 09-123-45-67</p>\n          <p>BTW: BE0123.456.789</p>\n          <div class=\"receipt-info\">\n            <p><strong>BON #${receiptNumber}</strong></p>\n            <p>Tafel: ${session.tableNumber} | Kassa: 01</p>\n            <p>${today.toLocaleDateString('nl-BE')} ${today.toLocaleTimeString('nl-BE', { hour: '2-digit', minute: '2-digit' })}</p>\n          </div>\n        </div>\n  `;\n\n  if (type === 'personal' && targetParticipant) {\n    // Personal receipt - only claimed items for the specific participant\n    pdfContent += `\n      <div class=\"personal-note\">\n        <strong>PERSOONLIJKE REKENING</strong><br>\n        Voor: ${targetParticipant.name}<br>\n        Via PartiPay - ${session.splitMode === 'items' ? 'Pay your Part' : 'Split the Bill'} modus\n      </div>\n    `;\n\n    const personalItems = billItems.filter((item: any) => {\n      return itemClaims.some((claim: any) => \n        claim.billItemId === item.id && claim.participantId === targetParticipant.id\n      );\n    }).map((item: any) => {\n      const claim = itemClaims.find((c: any) => \n        c.billItemId === item.id && c.participantId === targetParticipant.id\n      );\n      return {\n        ...item,\n        claimedQuantity: claim ? claim.quantity : 0\n      };\n    });\n\n    pdfContent += `\n      <div class=\"items-header\">\n        <div>ARTIKEL</div>\n        <div style=\"text-align: center;\">AANTAL</div>\n        <div style=\"text-align: right;\">PRIJS</div>\n        <div style=\"text-align: right;\">TOTAAL</div>\n      </div>\n    `;\n\n    let personalTotal = 0;\n    personalItems.forEach((item: any, index: number) => {\n      const itemTotal = parseFloat(item.price) * item.claimedQuantity;\n      personalTotal += itemTotal;\n      \n      pdfContent += `\n        <div class=\"item-row\">\n          <div>${item.name}</div>\n          <div style=\"text-align: center;\">${item.claimedQuantity}</div>\n          <div style=\"text-align: right;\">â¬${parseFloat(item.price).toFixed(2)}</div>\n          <div style=\"text-align: right;\"><strong>â¬${itemTotal.toFixed(2)}</strong></div>\n        </div>\n        <div class=\"item-details\">\n          BTW: 21% | Art.nr: ${1000 + index}\n        </div>\n      `;\n    });\n\n    const personalSubtotal = personalTotal / 1.21;\n    const personalBtw = personalTotal - personalSubtotal;\n\n    pdfContent += `\n      <div class=\"totals\">\n        <div class=\"total-row\">\n          <span>Subtotaal (excl. BTW):</span>\n          <span>â¬${personalSubtotal.toFixed(2)}</span>\n        </div>\n        <div class=\"total-row\">\n          <span>BTW (21%):</span>\n          <span>â¬${personalBtw.toFixed(2)}</span>\n        </div>\n        <div class=\"total-row total-final\">\n          <span>TOTAAL INCL. BTW:</span>\n          <span>â¬${personalTotal.toFixed(2)}</span>\n        </div>\n      </div>\n    `;\n  } else {\n    // Full receipt - all items\n    pdfContent += `\n      <div class=\"items-header\">\n        <div>ARTIKEL</div>\n        <div style=\"text-align: center;\">AANTAL</div>\n        <div style=\"text-align: right;\">PRIJS</div>\n        <div style=\"text-align: right;\">TOTAAL</div>\n      </div>\n    `;\n\n    billItems.forEach((item: any, index: number) => {\n      const itemTotal = parseFloat(item.price) * item.quantity;\n      \n      pdfContent += `\n        <div class=\"item-row\">\n          <div>${item.name}</div>\n          <div style=\"text-align: center;\">${item.quantity}</div>\n          <div style=\"text-align: right;\">â¬${parseFloat(item.price).toFixed(2)}</div>\n          <div style=\"text-align: right;\"><strong>â¬${itemTotal.toFixed(2)}</strong></div>\n        </div>\n        <div class=\"item-details\">\n          BTW: 21% | Art.nr: ${1000 + index}\n        </div>\n      `;\n    });\n\n    const totalAmount = parseFloat(session.totalAmount);\n    const subtotal = totalAmount / 1.21;\n    const btw = totalAmount - subtotal;\n\n    pdfContent += `\n      <div class=\"totals\">\n        <div class=\"total-row\">\n          <span>Subtotaal (excl. BTW):</span>\n          <span>â¬${subtotal.toFixed(2)}</span>\n        </div>\n        <div class=\"total-row\">\n          <span>BTW (21%):</span>\n          <span>â¬${btw.toFixed(2)}</span>\n        </div>\n        <div class=\"total-row total-final\">\n          <span>TOTAAL INCL. BTW:</span>\n          <span>â¬${session.totalAmount}</span>\n        </div>\n      </div>\n    `;\n  }\n\n  pdfContent += `\n        <div class=\"payment-info\">\n          <p>Betaalmethode: Via PartiPay App</p>\n          <p>Status: Voltooid - ${today.toLocaleString('nl-BE')}</p>\n          ${mainBooker ? `<p>Hoofdboeker: ${mainBooker.name}</p>` : ''}\n        </div>\n        \n        <div class=\"footer\">\n          <p><strong>Bedankt voor uw bezoek!</strong></p>\n          <p>Bewaar deze bon als bewijs van aankoop</p>\n          <p style=\"margin-top: 10px;\">\n            Retour binnen 7 dagen mogelijk<br>\n            www.deblauwekatergent.be\n          </p>\n          <p style=\"margin-top: 10px; font-size: 9px;\">\n            Gegenereerd door PartiPay - Makkelijk rekeningen splitsen\n          </p>\n        </div>\n      </body>\n    </html>\n  `;\n\n  // Create and download PDF\n  const fileName = `${session.restaurantName}_Tafel${session.tableNumber}_${type === 'full' ? 'Volledig' : 'Persoonlijk'}_${receiptNumber}.pdf`;\n  \n  // Use browser's print to PDF functionality\n  const printWindow = window.open('', '_blank');\n  if (printWindow) {\n    printWindow.document.write(pdfContent);\n    printWindow.document.close();\n    \n    // Immediate print for super fast experience\n    printWindow.onload = () => {\n      printWindow.print();\n      // Close window after printing\n      setTimeout(() => {\n        printWindow.close();\n      }, 200);\n    };\n  } else {\n    // Fallback: create downloadable HTML file\n    const blob = new Blob([pdfContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName.replace('.pdf', '.html');\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\nexport function generateBankingDeeplink(\n  amount: string, \n  iban: string, \n  recipient: string, \n  description: string,\n  returnUrl: string\n): string {\n  // Generate banking deeplink - using a universal format that works with most Belgian banking apps\n  const baseUrl = 'https://www.ing.be/';\n  const params = new URLSearchParams({\n    amount: amount,\n    iban: iban,\n    recipient: recipient,\n    description: description,\n    returnUrl: returnUrl\n  });\n  \n  // For demo purposes, we'll use a mock deeplink that simulates the banking flow\n  // In production, this would be the actual banking deeplink format\n  return `partipay://payment-simulator?${params.toString()}`;\n}\n\nexport async function simulateBankingFlow(\n  amount: string,\n  sessionId: string,\n  onSuccess: () => void,\n  onError: (error: string) => void\n) {\n  // Simulate banking app flow for demo\n  const userConfirmed = window.confirm(\n    `Bevestig betaling van â¬${amount}\\n\\nJe wordt doorgestuurd naar je banking app om de betaling te voltooien.\\n\\nKlik OK om door te gaan of Cancel om te annuleren.`\n  );\n  \n  if (userConfirmed) {\n    // Instant processing for super fast experience\n    (async () => {\n      // Simulate 95% success rate for better UX\n      if (Math.random() > 0.05) {\n        try {\n          // Complete payment on server\n          const response = await fetch(`/api/sessions/${sessionId}/complete-payment`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({})\n          });\n          \n          if (response.ok) {\n            // Redirect to success page\n            window.location.href = `/payment-success/${sessionId}`;\n          } else {\n            onError('Serverfout bij voltooien betaling');\n          }\n        } catch (error) {\n          onError('Netwerkfout bij voltooien betaling');\n        }\n      } else {\n        onError('Betaling geannuleerd of mislukt');\n      }\n    })();\n  } else {\n    onError('Betaling geannuleerd door gebruiker');\n  }\n}","size_bytes":11761},"client/src/pages/participant-join.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { simulateBankingFlow } from \"@/lib/pdf-utils\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { MdCallSplit, MdError } from \"react-icons/md\";\nimport { BiSelectMultiple } from \"react-icons/bi\";\n\ninterface SessionData {\n  session: {\n    id: string;\n    restaurantName: string;\n    tableNumber: string;\n    splitMode: string;\n    totalAmount: string;\n    participantCount: number;\n    isActive: boolean;\n    linkedIban?: string;\n    accountHolderName?: string;\n  };\n  participants: Array<{\n    id: string;\n    name: string;\n    hasPaid: boolean;\n    paidAmount: string;\n    expectedAmount: string;\n    isMainBooker: boolean;\n  }>;\n  billItems: Array<{\n    id: string;\n    name: string;\n    price: string;\n    quantity: number;\n  }>;\n  itemClaims: Array<{\n    participantId: string;\n    billItemId: string;\n    quantity: number;\n  }>;\n}\n\nexport default function ParticipantJoin() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/join/:sessionId\");\n  const { toast } = useToast();\n  \n  const [participantName, setParticipantName] = useState(\"\");\n  const [selectedItems, setSelectedItems] = useState<{[key: string]: number}>({});\n  const [processingPayment, setProcessingPayment] = useState(false);\n\n  const sessionQuery = useQuery({\n    queryKey: ['/api/sessions', params?.sessionId],\n    enabled: !!params?.sessionId,\n  });\n\n  // WebSocket for real-time updates\n  const { connected } = useWebSocket(params?.sessionId || '', (message) => {\n    if (message.type === 'items-claimed' || message.type === 'participant-joined' || message.type === 'participant-payment-completed') {\n      // Force immediate refresh of session data\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', params?.sessionId] });\n      queryClient.refetchQueries({ queryKey: ['/api/sessions', params?.sessionId] });\n      \n      if (message.type === 'items-claimed') {\n        const sessionData = sessionQuery.data as SessionData;\n        const participant = sessionData?.participants?.find((p: any) => p.id === message.participantId);\n        if (participant && participant.name !== participantName) {\n          toast({\n            title: \"Items geclaimd\",\n            description: `${participant.name} heeft items geselecteerd`,\n            duration: 3000,\n          });\n        }\n      }\n      \n      if (message.type === 'participant-payment-completed') {\n        const sessionData = sessionQuery.data as SessionData;\n        const participant = sessionData?.participants?.find((p: any) => p.id === message.participantId);\n        if (participant && participant.name !== participantName) {\n          toast({\n            title: \"Betaling voltooid\",\n            description: `${participant.name} heeft betaald`,\n            duration: 3000,\n          });\n        }\n      }\n    }\n  });\n\n  const joinMutation = useMutation({\n    mutationFn: async (data: { name: string; expectedAmount?: string }) => {\n      const res = await apiRequest('POST', `/api/sessions/${params?.sessionId}/join`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', params?.sessionId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Fout\",\n        description: \"Kon niet deelnemen aan sessie. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const claimItemsMutation = useMutation({\n    mutationFn: async (data: { participantId: string; itemClaims: Array<{ billItemId: string; quantity: number }> }) => {\n      const res = await apiRequest('POST', `/api/sessions/${params?.sessionId}/claim-items`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', params?.sessionId] });\n    },\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: async (amount: number) => {\n      const res = await apiRequest('POST', `/api/sessions/${params?.sessionId}/pay`, {\n        participantId: currentParticipant?.id,\n        amount\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      setLocation(`/payment-success/${params?.sessionId}`);\n    },\n  });\n\n  if (!match || !params?.sessionId) {\n    console.log('Route match:', match, 'Params:', params);\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <MdError className=\"w-16 h-16 text-orange-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Ongeldige link</h1>\n          <p className=\"text-gray-600 mb-4\">Route: {window.location.pathname}</p>\n          <Button onClick={() => setLocation('/')}>\n            Terug naar home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (sessionQuery.isLoading) {\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-gray-300 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Sessie laden...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (sessionQuery.error || !sessionQuery.data) {\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <MdError className=\"w-16 h-16 text-orange-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Sessie niet gevonden</h1>\n          <Button onClick={() => setLocation('/')}>\n            Terug naar home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const sessionData = sessionQuery.data as SessionData;\n  const mainBooker = sessionData.participants.find(p => p.isMainBooker);\n  const currentParticipant = sessionData.participants.find(p => p.name === participantName);\n  const isSplitMode = sessionData.session.splitMode === 'equal';\n  const isPayYourPartMode = sessionData.session.splitMode === 'items';\n\n  // Calculate available items (not fully claimed)\n  const availableItems = sessionData.billItems.map(item => {\n    const totalClaimed = sessionData.itemClaims\n      .filter(claim => claim.billItemId === item.id)\n      .reduce((sum, claim) => sum + claim.quantity, 0);\n    return {\n      ...item,\n      availableQuantity: item.quantity - totalClaimed\n    };\n  }).filter(item => item.availableQuantity > 0);\n\n  const handleJoinSession = () => {\n    if (!participantName.trim()) {\n      toast({\n        title: \"Fout\",\n        description: \"Voer je naam in om deel te nemen.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isSplitMode) {\n      // Calculate expected amount based on current participant count + 1 (including this new participant)\n      const currentParticipantCount = sessionData.participants.length + 1;\n      const expectedAmount = (parseFloat(sessionData.session.totalAmount) / currentParticipantCount).toFixed(2);\n      joinMutation.mutate({\n        name: participantName,\n        expectedAmount\n      });\n    } else {\n      joinMutation.mutate({ name: participantName });\n    }\n  };\n\n  const handleItemSelection = (itemId: string, quantity: number) => {\n    setSelectedItems(prev => ({\n      ...prev,\n      [itemId]: quantity\n    }));\n  };\n\n  const handleClaimItems = () => {\n    if (!currentParticipant) return;\n    \n    const itemClaims = Object.entries(selectedItems)\n      .filter(([_, quantity]) => quantity > 0)\n      .map(([billItemId, quantity]) => ({ billItemId, quantity }));\n\n    if (itemClaims.length === 0) {\n      toast({\n        title: \"Selecteer items\",\n        description: \"Kies minimaal Ã©Ã©n item om door te gaan.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    claimItemsMutation.mutate({\n      participantId: currentParticipant.id,\n      itemClaims\n    });\n  };\n\n  const handlePayment = () => {\n    if (!currentParticipant) return;\n    \n    const amount = parseFloat(currentParticipant.expectedAmount || '0');\n    setProcessingPayment(true);\n    \n    simulateBankingFlow(\n      amount.toString(),\n      sessionData.session.id,\n      () => {\n        setProcessingPayment(false);\n        paymentMutation.mutate(amount);\n      },\n      (error) => {\n        setProcessingPayment(false);\n        toast({\n          title: \"Betalingsfout\",\n          description: error,\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n  const calculateTotalSelected = () => {\n    return Object.entries(selectedItems).reduce((total, [itemId, quantity]) => {\n      const item = sessionData.billItems.find(i => i.id === itemId);\n      return total + (item ? parseFloat(item.price) * quantity : 0);\n    }, 0);\n  };\n\n  return (\n    <div className=\"monarch-container flex flex-col min-h-screen\">\n      <div className=\"flex-1 px-4 py-6 space-y-6\">\n        \n        {/* Header */}\n        <div className=\"text-center space-y-4 animate-slide-up\">\n          <div className=\"w-16 h-16 rounded-full flex items-center justify-center mx-auto bg-[#f97315]\">\n            {isSplitMode ? <MdCallSplit className=\"text-white text-2xl\" /> : <BiSelectMultiple className=\"text-white text-2xl\" />}\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Deelnemen aan sessie</h1>\n            <p className=\"text-gray-600 mb-2\">\n              {sessionData.session.restaurantName} â¢ Tafel {sessionData.session.tableNumber}\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              {isSplitMode ? 'Split the Bill' : 'Pay your Part'} â¢ Hoofdboeker: {mainBooker?.name}\n            </p>\n          </div>\n        </div>\n\n        {/* Join Form */}\n        {!currentParticipant && (\n          <div className=\"monarch-card animate-slide-up\" style={{animationDelay: '0.1s'}}>\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Je gegevens</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Je naam\n                </label>\n                <input\n                  type=\"text\"\n                  value={participantName}\n                  onChange={(e) => setParticipantName(e.target.value)}\n                  placeholder=\"Voer je naam in\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-monarch-primary focus:border-transparent\"\n                  data-testid=\"input-participant-name\"\n                />\n              </div>\n              \n              {isSplitMode && (\n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-orange-800 font-medium\">Je aandeel:</span>\n                    <span className=\"text-orange-900 font-bold text-lg\">\n                      â¬ {(parseFloat(sessionData.session.totalAmount) / sessionData.session.participantCount).toFixed(2)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-orange-700 mt-2\">\n                    Totaal: â¬ {sessionData.session.totalAmount} Ã· {sessionData.session.participantCount} personen\n                  </p>\n                </div>\n              )}\n\n              <Button\n                onClick={handleJoinSession}\n                disabled={joinMutation.isPending || !participantName.trim()}\n                className=\"w-full monarch-btn monarch-btn-primary\"\n                data-testid=\"button-join-session\"\n              >\n                {joinMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Deelnemen...\n                  </>\n                ) : (\n                  'Deelnemen aan sessie'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Item Selection (Pay Your Part) */}\n        {currentParticipant && isPayYourPartMode && parseFloat(currentParticipant.expectedAmount || '0') === 0 && (\n          <div className=\"monarch-card animate-slide-up\" style={{animationDelay: '0.2s'}}>\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Selecteer je items</h3>\n            <div className=\"space-y-3\">\n              {availableItems.map((item) => (\n                <div key={item.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-900\">{item.name}</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      â¬ {parseFloat(item.price).toFixed(2)} â¢ {item.availableQuantity} beschikbaar\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={() => handleItemSelection(item.id, Math.max(0, (selectedItems[item.id] || 0) - 1))}\n                      disabled={!selectedItems[item.id] || selectedItems[item.id] === 0}\n                      className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center disabled:opacity-50\"\n                    >\n                      <i className=\"fas fa-minus text-xs\"></i>\n                    </button>\n                    <span className=\"w-8 text-center font-semibold\">\n                      {selectedItems[item.id] || 0}\n                    </span>\n                    <button\n                      onClick={() => handleItemSelection(item.id, Math.min(item.availableQuantity, (selectedItems[item.id] || 0) + 1))}\n                      disabled={selectedItems[item.id] >= item.availableQuantity}\n                      className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center disabled:opacity-50\"\n                    >\n                      <i className=\"fas fa-plus text-xs\"></i>\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {Object.keys(selectedItems).length > 0 && (\n              <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-green-800 font-medium\">Totaal geselecteerd:</span>\n                  <span className=\"text-green-900 font-bold text-lg\">\n                    â¬ {calculateTotalSelected().toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <Button\n              onClick={handleClaimItems}\n              disabled={claimItemsMutation.isPending || Object.keys(selectedItems).length === 0}\n              className=\"w-full monarch-btn monarch-btn-primary mt-4\"\n              data-testid=\"button-claim-items\"\n            >\n              {claimItemsMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Items selecteren...\n                </>\n              ) : (\n                'Bevestig selectie'\n              )}\n            </Button>\n          </div>\n        )}\n\n        {/* Payment Section */}\n        {currentParticipant && parseFloat(currentParticipant.expectedAmount || '0') > 0 && (\n          <div className=\"monarch-card animate-slide-up\" style={{animationDelay: '0.3s'}}>\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Betaling</h3>\n            <div className=\"space-y-4\">\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-green-800 font-medium\">Te betalen bedrag:</span>\n                  <span className=\"text-green-900 font-bold text-xl\">\n                    â¬ {parseFloat(currentParticipant.expectedAmount).toFixed(2)}\n                  </span>\n                </div>\n              </div>\n\n              {sessionData.session.linkedIban && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">Betaling naar:</h4>\n                  <p className=\"text-blue-700\">{sessionData.session.accountHolderName}</p>\n                  <p className=\"text-sm text-blue-600 font-mono\">\n                    {sessionData.session.linkedIban.substring(0, 4)}****{sessionData.session.linkedIban.substring(-4)}\n                  </p>\n                </div>\n              )}\n\n              <Button\n                onClick={handlePayment}\n                disabled={paymentMutation.isPending || processingPayment}\n                className=\"w-full monarch-btn monarch-btn-primary\"\n                data-testid=\"button-pay-amount\"\n              >\n                {paymentMutation.isPending || processingPayment ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    {processingPayment ? 'Banking app...' : 'Betaling verwerken...'}\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-credit-card mr-2\"></i>\n                    Betaal â¬ {parseFloat(currentParticipant.expectedAmount).toFixed(2)}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17777},"client/src/pages/payment-success.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateReceiptPDF } from \"@/lib/pdf-utils\";\n\ninterface SessionData {\n  session: {\n    id: string;\n    restaurantName: string;\n    tableNumber: string;\n    splitMode: string;\n    totalAmount: string;\n    isActive: boolean;\n  };\n  participants: Array<{\n    id: string;\n    name: string;\n    hasPaid: boolean;\n    paidAmount: string;\n    expectedAmount: string;\n    isMainBooker: boolean;\n  }>;\n  billItems: Array<{\n    id: string;\n    name: string;\n    price: string;\n    quantity: number;\n  }>;\n  itemClaims: Array<{\n    participantId: string;\n    billItemId: string;\n    quantity: number;\n  }>;\n}\n\nexport default function PaymentSuccess() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/payment-success/:sessionId\");\n  const { toast } = useToast();\n  const [downloadingPDF, setDownloadingPDF] = useState<'full' | 'personal' | null>(null);\n\n  const sessionQuery = useQuery({\n    queryKey: ['/api/sessions', params?.sessionId],\n    enabled: !!params?.sessionId,\n  });\n\n  const handleDownloadFullReceipt = async () => {\n    if (!sessionQuery.data) return;\n    \n    setDownloadingPDF('full');\n    try {\n      await generateReceiptPDF(sessionQuery.data, 'full');\n      toast({\n        title: \"PDF gedownload\",\n        description: \"Volledige rekening is gedownload als PDF\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fout\",\n        description: \"Kon PDF niet genereren. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDownloadingPDF(null);\n    }\n  };\n\n  const handleDownloadPersonalReceipt = async () => {\n    if (!sessionQuery.data) return;\n    \n    const sessionData = sessionQuery.data as SessionData;\n    \n    // Try to identify which participant should get the personal receipt\n    // For \"Pay your Part\" mode, find the participant who has claimed items (not main booker)\n    let targetParticipantId: string | undefined;\n    \n    if (sessionData.session.splitMode === 'items') {\n      // Find non-main-booker who has claimed items\n      const participantsWithClaims = sessionData.participants.filter(p => {\n        if (p.isMainBooker) return false;\n        return sessionData.itemClaims.some(claim => claim.participantId === p.id);\n      });\n      \n      // If there's only one participant with claims, use them\n      if (participantsWithClaims.length === 1) {\n        targetParticipantId = participantsWithClaims[0].id;\n      } else {\n        // If multiple participants have claims, try to find the most recently paid one\n        const paidParticipantsWithClaims = participantsWithClaims.filter(p => p.hasPaid);\n        if (paidParticipantsWithClaims.length > 0) {\n          targetParticipantId = paidParticipantsWithClaims[paidParticipantsWithClaims.length - 1].id;\n        } else {\n          targetParticipantId = participantsWithClaims[0]?.id;\n        }\n      }\n    }\n    \n    // Fallback to main booker if no specific participant found\n    if (!targetParticipantId) {\n      const mainBooker = sessionData.participants.find(p => p.isMainBooker);\n      targetParticipantId = mainBooker?.id;\n    }\n    \n    setDownloadingPDF('personal');\n    try {\n      await generateReceiptPDF(sessionQuery.data, 'personal', targetParticipantId);\n      toast({\n        title: \"PDF gedownload\",\n        description: \"Persoonlijke rekening is gedownload als PDF\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fout\",\n        description: \"Kon PDF niet genereren. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDownloadingPDF(null);\n    }\n  };\n\n  if (!match || !params?.sessionId) {\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Sessie niet gevonden</h1>\n          <Button onClick={() => setLocation('/')}>\n            Terug naar home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (sessionQuery.isLoading) {\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-gray-300 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Sessie laden...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (sessionQuery.error || !sessionQuery.data) {\n    return (\n      <div className=\"monarch-container flex flex-col items-center justify-center min-h-screen px-4\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Fout bij laden sessie</h1>\n          <Button onClick={() => setLocation('/')}>\n            Terug naar home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const sessionData = sessionQuery.data as SessionData;\n  const isPayYourPart = sessionData.session.splitMode === 'items';\n  const mainBooker = sessionData.participants.find(p => p.isMainBooker);\n\n  return (\n    <div className=\"monarch-container flex flex-col min-h-screen\">\n      <div className=\"flex-1 px-4 py-6 space-y-6\">\n        \n        {/* Success Header */}\n        <div className=\"text-center space-y-4 animate-slide-up\">\n          <div className=\"w-20 h-20 rounded-full flex items-center justify-center mx-auto bg-[#f97315]\">\n            <i className=\"fas fa-check text-white text-3xl\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Betaling succesvol!</h1>\n            <p className=\"text-gray-600 mb-4\">\n              Je betaling voor {sessionData.session.restaurantName} is verwerkt\n            </p>\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-green-800 font-medium\">Jij hebt betaald:</span>\n                <span className=\"text-green-900 font-bold text-lg\">\n                  â¬ {(() => {\n                    // Find who actually paid and show their paid amount\n                    const mainBooker = sessionData.participants.find(p => p.isMainBooker);\n                    \n                    // If main booker paid the full bill, show total amount\n                    if (mainBooker && mainBooker.hasPaid && parseFloat(mainBooker.paidAmount || '0') === parseFloat(sessionData.session.totalAmount)) {\n                      return parseFloat(sessionData.session.totalAmount).toFixed(2);\n                    }\n                    \n                    // For individual participants who paid their share\n                    const paidParticipants = sessionData.participants.filter(p => p.hasPaid && parseFloat(p.paidAmount || '0') > 0);\n                    if (paidParticipants.length > 0) {\n                      // Use the paidAmount from the participant (this is the actual amount they paid)\n                      const participant = paidParticipants[paidParticipants.length - 1]; // Get most recent payment\n                      return parseFloat(participant.paidAmount || '0').toFixed(2);\n                    }\n                    \n                    // Fallback for equal split\n                    if (sessionData.session.splitMode === 'equal') {\n                      return (parseFloat(sessionData.session.totalAmount) / sessionData.participants.length).toFixed(2);\n                    }\n                    \n                    return sessionData.session.totalAmount;\n                  })()}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Receipt Download Options */}\n        <div className=\"space-y-4 animate-slide-up\" style={{animationDelay: '0.05s'}}>\n          \n          {/* Full Receipt Option */}\n          <div className=\"monarch-card\">\n            <div className=\"flex items-center justify-center\">\n              <Button\n                onClick={handleDownloadFullReceipt}\n                disabled={downloadingPDF === 'full'}\n                className=\"monarch-btn monarch-btn-primary\"\n                data-testid=\"button-download-full-receipt\"\n              >\n                {downloadingPDF === 'full' ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Genereren...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download de rekening\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Personal Receipt Option (only for Pay Your Part) */}\n          {isPayYourPart && mainBooker && (\n            <div className=\"monarch-card\">\n              <div className=\"flex items-center justify-center\">\n                <Button\n                  onClick={handleDownloadPersonalReceipt}\n                  disabled={downloadingPDF === 'personal'}\n                  className=\"monarch-btn monarch-btn-secondary\"\n                  data-testid=\"button-download-personal-receipt\"\n                >\n                  {downloadingPDF === 'personal' ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Genereren...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download persoonlijke rekening\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Session Summary */}\n        <div className=\"monarch-card animate-slide-up\" style={{animationDelay: '0.1s'}}>\n          <h3 className=\"font-semibold text-gray-900 mb-3\">Sessie overzicht</h3>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Restaurant:</span>\n              <span className=\"font-medium\">{sessionData.session.restaurantName}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Tafel:</span>\n              <span className=\"font-medium\">{sessionData.session.tableNumber}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Splitsingsmodus:</span>\n              <span className=\"font-medium\">\n                {isPayYourPart ? 'Pay your Part' : 'Split the Bill'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Deelnemers:</span>\n              <span className=\"font-medium\">{sessionData.participants.length}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11139},"server/mock-bank-service.ts":{"content":"// Mock bank service for production use without external dependencies\n// Simulates realistic Dutch banking integration\n\ninterface MockBankAccount {\n  id: string;\n  bankName: string;\n  accountHolder: string;\n  iban: string;\n  balance: number;\n  bankCode: string;\n  logo: string;\n}\n\ninterface MockBank {\n  id: string;\n  name: string;\n  logo: string;\n  color: string;\n  accounts: MockBankAccount[];\n}\n\n// Realistic Belgian banks with their BIC codes\nconst BELGIAN_BANKS: Record<string, MockBank> = {\n  'kbc': {\n    id: 'kbc',\n    name: 'KBC Bank',\n    logo: 'ðµ',\n    color: '#1E3A8A',\n    accounts: [\n      {\n        id: 'kbc_1',\n        bankName: 'KBC Bank',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE68539007547034',\n        balance: 2847.32,\n        bankCode: 'KREDBEBB',\n        logo: 'ðµ'\n      },\n      {\n        id: 'kbc_2', \n        bankName: 'KBC Bank',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE42539007621845',\n        balance: 156.78,\n        bankCode: 'KREDBEBB',\n        logo: 'ðµ'\n      }\n    ]\n  },\n  'belfius': {\n    id: 'belfius',\n    name: 'Belfius Bank',\n    logo: 'ð¢',\n    color: '#16A085',\n    accounts: [\n      {\n        id: 'belfius_1',\n        bankName: 'Belfius Bank',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE75068901234567',\n        balance: 1523.45,\n        bankCode: 'GKCCBEBB',\n        logo: 'ð¢'\n      }\n    ]\n  },\n  'bnpparibas': {\n    id: 'bnpparibas',\n    name: 'BNP Paribas Fortis',\n    logo: 'ðï¸',\n    color: '#00A651',\n    accounts: [\n      {\n        id: 'bnp_1',\n        bankName: 'BNP Paribas Fortis',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE92001012345678',\n        balance: 3241.87,\n        bankCode: 'GEBABEBB',\n        logo: 'ðï¸'\n      }\n    ]\n  },\n  'ing': {\n    id: 'ing',\n    name: 'ING BelgiÃ«',\n    logo: 'ð¦',\n    color: '#FF6200',\n    accounts: [\n      {\n        id: 'ing_1',\n        bankName: 'ING BelgiÃ«',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE54310123456789',\n        balance: 892.14,\n        bankCode: 'BBRUBEBB',\n        logo: 'ð¦'\n      }\n    ]\n  },\n  'argenta': {\n    id: 'argenta',\n    name: 'Argenta Bank',\n    logo: 'ð ',\n    color: '#E67E22',\n    accounts: [\n      {\n        id: 'argenta_1',\n        bankName: 'Argenta Bank',\n        accountHolder: 'Jan Peeters',\n        iban: 'BE95979012345678',\n        balance: 1456.89,\n        bankCode: 'ARSPBE22',\n        logo: 'ð '\n      }\n    ]\n  }\n};\n\nexport interface MockAuthRequest {\n  bankId: string;\n  accountId: string;\n  state: string;\n}\n\nexport interface MockAuthResponse {\n  success: boolean;\n  data?: {\n    iban: string;\n    accountHolder: string;\n    bankName: string;\n    logo: string;\n  };\n  error?: string;\n}\n\nexport class MockBankService {\n  // Generate a secure state parameter\n  static generateState(): string {\n    return Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n\n  // Get list of available banks\n  static getBankList(): Array<{id: string; name: string; logo: string; color: string}> {\n    return Object.values(BELGIAN_BANKS).map(bank => ({\n      id: bank.id,\n      name: bank.name,\n      logo: bank.logo,\n      color: bank.color\n    }));\n  }\n\n  // Get accounts for a specific bank\n  static getBankAccounts(bankId: string): MockBankAccount[] {\n    const bank = BELGIAN_BANKS[bankId];\n    return bank ? bank.accounts : [];\n  }\n\n  // Simulate bank authentication\n  static async authenticateWithBank(request: MockAuthRequest): Promise<MockAuthResponse> {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    const bank = BELGIAN_BANKS[request.bankId];\n    if (!bank) {\n      return {\n        success: false,\n        error: 'unknown_bank'\n      };\n    }\n\n    const account = bank.accounts.find(acc => acc.id === request.accountId);\n    if (!account) {\n      return {\n        success: false,\n        error: 'account_not_found'\n      };\n    }\n\n    // Simulate random authentication failures (5% chance)\n    if (Math.random() < 0.05) {\n      return {\n        success: false,\n        error: 'authentication_failed'\n      };\n    }\n\n    return {\n      success: true,\n      data: {\n        iban: account.iban,\n        accountHolder: account.accountHolder,\n        bankName: account.bankName,\n        logo: account.logo\n      }\n    };\n  }\n\n  // Validate IBAN format (basic check)\n  static validateIban(iban: string): boolean {\n    // Remove spaces and convert to uppercase\n    const cleanIban = iban.replace(/\\s/g, '').toUpperCase();\n    \n    // Check if it's a valid Belgian IBAN format\n    const belgianIbanPattern = /^BE\\d{2}\\d{12}$/;\n    return belgianIbanPattern.test(cleanIban);\n  }\n\n  // Format IBAN for display\n  static formatIban(iban: string): string {\n    const cleanIban = iban.replace(/\\s/g, '').toUpperCase();\n    return cleanIban.replace(/(.{4})/g, '$1 ').trim();\n  }\n}","size_bytes":4904},"client/src/components/bank-selector.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, ArrowLeft, Building2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface BankAccount {\n  id: string;\n  bankName: string;\n  accountHolder: string;\n  iban: string;\n  balance: number;\n  logo: string;\n}\n\ninterface Bank {\n  id: string;\n  name: string;\n  logo: string;\n  color: string;\n}\n\ninterface BankSelectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAccountSelected: (accountData: { iban: string; accountHolder: string; bankName: string; logo: string }) => void;\n}\n\nexport default function BankSelector({ isOpen, onClose, onAccountSelected }: BankSelectorProps) {\n  const [step, setStep] = useState<'banks' | 'accounts' | 'authenticating'>('banks');\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const [accounts, setAccounts] = useState<BankAccount[]>([]);\n  const [selectedBank, setSelectedBank] = useState<string>('');\n  const [selectedAccount, setSelectedAccount] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchBanks();\n    }\n  }, [isOpen]);\n\n  const fetchBanks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/mock-banks');\n      if (!response.ok) throw new Error('Failed to fetch banks');\n      const banksData = await response.json();\n      setBanks(banksData);\n    } catch (error) {\n      console.error('Error fetching banks:', error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon banken niet laden. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBankSelect = async (bankId: string) => {\n    try {\n      setLoading(true);\n      setSelectedBank(bankId);\n      \n      const response = await fetch(`/api/mock-banks/${bankId}/accounts`);\n      if (!response.ok) throw new Error('Failed to fetch accounts');\n      const accountsData = await response.json();\n      setAccounts(accountsData);\n      setStep('accounts');\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon rekeningen niet laden. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAccountSelect = async () => {\n    if (!selectedAccount || !selectedBank) return;\n\n    try {\n      setStep('authenticating');\n      setLoading(true);\n\n      const state = Math.random().toString(36).substring(2, 15) + \n                   Math.random().toString(36).substring(2, 15);\n\n      const response = await fetch('/api/mock-banks/authenticate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          bankId: selectedBank,\n          accountId: selectedAccount,\n          state\n        })\n      });\n\n      if (!response.ok) throw new Error('Authentication failed');\n      \n      const result = await response.json();\n      \n      if (result.success && result.data) {\n        onAccountSelected(result.data);\n        handleClose();\n        toast({\n          title: \"Bankrekening gekoppeld!\",\n          description: `${result.data.accountHolder} - ${formatIban(result.data.iban)}`,\n        });\n      } else {\n        throw new Error(result.error || 'Authentication failed');\n      }\n    } catch (error) {\n      console.error('Authentication error:', error);\n      toast({\n        title: \"Authenticatie mislukt\",\n        description: \"Kon niet inloggen bij je bank. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n      setStep('accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setStep('banks');\n    setSelectedBank('');\n    setSelectedAccount('');\n    setAccounts([]);\n    onClose();\n  };\n\n  const formatIban = (iban: string) => {\n    return iban.replace(/(.{4})/g, '$1 ').trim();\n  };\n\n  const formatBalance = (balance: number) => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR'\n    }).format(balance);\n  };\n\n  const selectedBankData = banks.find(bank => bank.id === selectedBank);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            {step === 'accounts' && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setStep('banks')}\n                className=\"p-1 h-6 w-6\"\n                data-testid=\"button-back-to-banks\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            )}\n            <Building2 className=\"h-5 w-5\" />\n            <span>\n              {step === 'banks' && 'Kies je bank'}\n              {step === 'accounts' && `${selectedBankData?.name} rekeningen`}\n              {step === 'authenticating' && 'Authenticeren...'}\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        {loading && step === 'banks' && (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-6 w-6 animate-spin\" />\n            <span className=\"ml-2\">Banken laden...</span>\n          </div>\n        )}\n\n        {step === 'banks' && !loading && (\n          <div className=\"space-y-3\">\n            {banks.map((bank) => (\n              <Button\n                key={bank.id}\n                variant=\"outline\"\n                className=\"w-full h-16 justify-start space-x-3 text-left\"\n                onClick={() => handleBankSelect(bank.id)}\n                data-testid={`button-select-bank-${bank.id}`}\n              >\n                <div className=\"text-2xl\">{bank.logo}</div>\n                <div>\n                  <div className=\"font-medium\">{bank.name}</div>\n                  <div className=\"text-sm text-gray-500\">Nederlandse bank</div>\n                </div>\n              </Button>\n            ))}\n          </div>\n        )}\n\n        {step === 'accounts' && !loading && (\n          <div className=\"space-y-4\">\n            <RadioGroup value={selectedAccount} onValueChange={setSelectedAccount}>\n              {accounts.map((account) => (\n                <div key={account.id} className=\"border rounded-lg p-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <RadioGroupItem value={account.id} id={account.id} />\n                    <Label htmlFor={account.id} className=\"flex-1 cursor-pointer\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{account.accountHolder}</div>\n                          <div className=\"text-sm text-gray-600 font-mono\">\n                            {formatIban(account.iban)}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm text-gray-500\">{account.bankName}</div>\n                          <div className=\"font-medium text-green-600\">\n                            {formatBalance(account.balance)}\n                          </div>\n                        </div>\n                      </div>\n                    </Label>\n                  </div>\n                </div>\n              ))}\n            </RadioGroup>\n\n            <Button\n              onClick={handleAccountSelect}\n              disabled={!selectedAccount}\n              className=\"w-full\"\n              data-testid=\"button-authenticate-account\"\n            >\n              Koppel deze rekening\n            </Button>\n          </div>\n        )}\n\n        {step === 'authenticating' && (\n          <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n            <div className=\"text-center\">\n              <div className=\"font-medium\">Authenticeren bij {selectedBankData?.name}</div>\n              <div className=\"text-sm text-gray-500 mt-1\">\n                Bezig met veilige verbinding maken...\n              </div>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8590}}}